{% extends "cvode_solver.c.template" %}
{% block compute_temperature_function %}
    /* P = (k rho T) / ( mu mh ) */
    /* T = (1 - gamma) * e * mu * mh / k */
    realtype p2d, tgas, rho_cgs, nh2, nother, x, gamma2;
    /* (gamma - 1) * rho (g / cm^3) * e (ergs / g) */
    rho_cgs = data->rho[cell]*CVODE_MH;
    p2d = (CVODE_GAMMA - 1.0)*rho_cgs*{{ species_varnames["ge"] }};
    tgas = 0.0;
    {%- for sname, s in non_eq_species_table|dictsort %}
    {%- if s.weight > 0 %}
    /* particles / cm^3 */
    tgas += {{ species_varnames[sname] }} / {{s.weight}};
    {%- endif %}
    {%- endfor %}
    tgas = p2d / (CVODE_KB * tgas);
    /*printf("%0.5e\n", tgas);*/

    /* Now we apply a temperature correction for the gamma of H2 */
    nh2 = 0.5 * ( {{ species_varnames['H2I'] }} + {{ species_varnames['H2II'] }} );
    nother = 0.25 * ( {{ species_varnames['HeI'] }} +
                      {{ species_varnames['HeII'] }} +
                      {{ species_varnames['HeIII'] }} ) +
                    ( {{ species_varnames['HI'] }} +
                      {{ species_varnames['HII'] }} +
                      {{ species_varnames['de'] }} );
    if ((nh2 / nother) > 1.0e-3) {
        x = 6100.0/tgas;
        if (x > 10.0) {
            gamma2 = 0.5*5.0;
        } else {
            gamma2 = 0.5 * (5.0 + 2.0*x*x * pow(exp(x)/(exp(x) - 1.0), 2.0));
        }
    } else {
        gamma2 = 2.5;
    }
    gamma2 = 1.0 + (nh2 + nother) / (nh2 * gamma2 + nother/(CVODE_GAMMA-1.0));
    tgas = tgas * (gamma2 - 1.0)/(CVODE_GAMMA - 1.0);

    T = CVODE_MAX(tgas, 1.0);
    //fprintf(stderr, "SETTING T = %0.3e\n", T);
{% endblock %}

{% block apply_constraints %}
    {{ species_varnames['de'] }} = 
        {{species_varnames['HII']}} +
        {{species_varnames['H2II']}} / 2.0 +
        {{species_varnames['HeII']}} / 4.0 +
        {{species_varnames['HeIII']}} / 2.0 -
        {{species_varnames['HM']}};

{% endblock %}

{% block end_of_derivatives %}
    /* We have gas energy in ergs/g */
    /* We have 7.177e-12 ergs / molecule */
    /* (7.177e-12 ergs / H2) * (H2 / ( s cm^3 )) => ergs / (s cm^3) */
    /* So divide by rho in grams */
    {
    /*
       This may be overkill, but by shuffling things around a bit we can reduce
       the relative (expected) difference between the various components.  Declare
       the variables local to this clause by putting them inside the above
       brackets.
    */
    long double H = {{ species_varnames["HI"] }};
    long double Hsq = H * H;
    long double M = {{ species_varnames["H2I"] }};
    long double k13 = data->rate_storage[{{ reaction_ids['r13'] }}][cell];
    long double k21 = data->rate_storage[{{ reaction_ids['r21'] }}][cell];
    long double k22 = data->rate_storage[{{ reaction_ids['r22'] }}][cell];
    long double k23 = data->rate_storage[{{ reaction_ids['r23'] }}][cell];
    long double temp = 0.0;
    temp += H * (k22 * Hsq - k13 * M);
    temp += M * (k21 * Hsq - k23 * M);
    /* H * (k22 * H^2 - k13 * H_2) + H_2 * (k21 * H^2 - k23 * H_2) */
    edot += (7.177e-12 / (CVODE_MH * data->rho[cell])) * 0.5 * (temp);
    /*fprintf(stderr, "%0.5e %0.5e %0.5e %0.5e %0.5e %0.5e %0.5e\n",
            H, Hsq, M, k13, k21, k22, k23);*/
    {% set sname = "ge" %}
    /*printf("  cell = % 4i species = % 7s val = %0.5e dot = % 0.5e\n",
           cell, "{{ sname }}",
           {{ species_varnames[sname] }},
           NV_Ith_S(ydot, {{ non_eq_species_ids[sname] }} + offset));
           */
    }
{% endblock %}
