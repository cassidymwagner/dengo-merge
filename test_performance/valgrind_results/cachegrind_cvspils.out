--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./a.out
Data file:        cachegrind.out.620
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
        Ir    I1mr  ILmr         Dr    D1mr   DLmr        Dw    D1mw   DLmw 
--------------------------------------------------------------------------------
32,734,228 467,964 7,133 11,739,174 195,193 13,817 3,621,433 119,306 38,187  PROGRAM TOTALS

--------------------------------------------------------------------------------
       Ir   I1mr  ILmr        Dr   D1mr  DLmr      Dw   D1mw   DLmw  file:function
--------------------------------------------------------------------------------
5,360,233 26,826 1,541 1,567,801 88,426    37 164,850  3,452    113  ???:???
2,114,840 73,857   112 1,028,118  6,850     0 121,030  9,361      0  /home/kwoksun2/dengo/dengo-project-dengo-ed14369817a2/dengo_data_structure/Untitled Folder/serial_performance_grid/eqH2/final/final/final__solver.C:final__interpolate_rates(final__data*, int)
2,005,276 94,705   138 1,075,256    265     0 234,416    155      0  /home/kwoksun2/dengo/dengo-project-dengo-ed14369817a2/dengo_data_structure/Untitled Folder/serial_performance_grid/eqH2/final/final/final__solver.C:calculate_rhs_final_(double, _generic_N_Vector*, _generic_N_Vector*, void*)
1,551,800  5,910     8   867,212    777     0 127,820      0      0  ???:Vaxpy_Serial
1,312,415     90    18        90     33     0 328,960 41,119      0  ???:H5C_create
1,206,781  5,094    31   235,084  1,408   394 112,026      0      0  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/e_pow.c:__ieee754_pow_sse2
  943,437 16,835    22   190,964  2,278   212  60,693    590      2  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/e_log.c:__ieee754_log_avx
  935,550 34,281    50   432,985      2     1  82,873      5      0  /home/kwoksun2/dengo/dengo-project-dengo-ed14369817a2/dengo_data_structure/Untitled Folder/serial_performance_grid/eqH2/final/final/final__solver.C:final__calculate_temperature(final__data*, double*, int, int)
  935,152  4,864     4   514,112    941     0  93,072      0      0  ???:N_VDotProd_Serial
  913,121    144    11   151,670  2,633 1,213  56,581     54      0  /build/eglibc-ripdx6/eglibc-2.19/elf/dl-lookup.c:_dl_lookup_symbol_x
  822,314    265    33   282,482  9,176 1,161 139,058     64      0  /build/eglibc-ripdx6/eglibc-2.19/elf/dl-lookup.c:do_lookup_x
  820,583     35     2    88,414      0     0       0      0      0  /build/eglibc-ripdx6/eglibc-2.19/elf/../sysdeps/generic/dl-hash.h:do_lookup_x
  652,984  4,815     3   363,354      0     0  86,889      0      0  ???:N_VWrmsNorm_Serial
  630,383  3,062    17   313,720      1     0 132,966      0      0  ???:N_VLinearSum_Serial
  597,065  1,632     4   336,306    949     0  56,051      0      0  ???:VLin1_Serial
  521,128     84     1    72,956  1,106    40       0      0      0  ???:H5_hash_string
  490,145    659     3   275,890     37     0  55,765     31      0  ???:VCopy_Serial
  472,780  8,095    16   234,241  3,820     0  49,427     79      0  /home/kwoksun2/dengo/dengo-project-dengo-ed14369817a2/dengo_data_structure/Untitled Folder/serial_performance_grid/eqH2/final/final/final__solver.C:final__interpolate_gamma(final__data*, int)
  422,390 17,967    44   200,606  1,925     0  48,697      0      0  ???:SUNLinSolSolve_SPGMR
  419,389  1,334    59    53,604    819     4  69,088  2,646  2,003  /build/eglibc-ripdx6/eglibc-2.19/malloc/malloc.c:_int_malloc
  378,695  4,821     9    76,590  1,197   218  17,020      0      0  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/e_exp.c:__exp1
  339,291    384     5     1,454      5     0 186,398 44,232 25,709  /build/eglibc-ripdx6/eglibc-2.19/string/../sysdeps/x86_64/memset.S:memset
  312,605    726    11    99,190  3,409     1  38,523     67      0  ???:H5SL_search
  292,435     11     0    90,497  4,615 2,219       0      0      0  /build/eglibc-ripdx6/eglibc-2.19/string/../sysdeps/x86_64/multiarch/../strcmp.S:strcmp
  284,544    316     3   155,648      0     0  26,752      0      0  ???:N_VDiv_Serial
  284,310    734     2   155,520    205     0  26,730      0      0  ???:N_VProd_Serial
  283,393     23    23    60,928  4,205 2,778  27,230  2,030  1,287  /build/eglibc-ripdx6/eglibc-2.19/elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  270,253  1,342     4    47,317    374     0  44,769      0      0  /build/eglibc-ripdx6/eglibc-2.19/math/w_pow.c:pow
  266,460     92     6   109,087  5,297 1,815  40,118     34      1  /build/eglibc-ripdx6/eglibc-2.19/elf/dl-lookup.c:check_match.9481
  253,248      3     1   126,624    382     0  94,968      0      0  ???:N_VLinearSum
  228,456  1,814     1   133,600      0     0  22,712      0      0  ???:VScaleBy_Serial
  224,411    628    19    57,612  1,760     0  26,180     24      0  /build/eglibc-ripdx6/eglibc-2.19/malloc/malloc.c:_int_free
  215,110  2,634     3   121,164      0     0  20,194      0      0  ???:VScaleDiff_Serial
  213,274  6,161    19    90,300      9     1  28,699      0      0  ???:ModifiedGS
  185,604    175     3    74,142  1,116     0  55,521    337      0  ???:H5FL_reg_free
  181,365  9,775    24    75,618     10     1  27,148      1      0  ???:QRfact
  157,711     72     4    64,109  2,699     2  24,841     24      1  ???:H5FL_reg_malloc
  146,001  2,127    71    63,178     11     1  12,420      0      0  ???:cvSLdet
  138,136    848     9    41,905  7,739   127  39,690  7,426  6,866  /build/eglibc-ripdx6/eglibc-2.19/string/../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:__memcpy_sse2_unaligned
  134,905  3,307    10    57,513      0     0  11,466      0      0  ???:QRsol
  119,306    246     2    69,020      0     0  16,762      1      0  ???:N_VConst_Serial
  115,934  6,024     7    24,206    662     2   7,644      0      0  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/e_exp.c:__ieee754_exp_avx
  113,696    235     4    33,282    348     0   8,321     11      2  /build/eglibc-ripdx6/eglibc-2.19/malloc/malloc.c:malloc
  111,617  1,232    26    36,738  1,758     0  22,272    574      4  ???:H5C_protect
  109,241    580     6    44,113     13     1  31,433      8      0  ???:N_VScale_Serial
  101,322  1,032    35    19,119    800    13       0      0      0  /build/eglibc-ripdx6/eglibc-2.19/string/../sysdeps/x86_64/multiarch/../strcmp.S:__strcmp_ssse3
  101,150    699    13    28,388      0     0  17,270     62      0  ???:H5C_unprotect
   99,520     14    14    31,847  3,355 2,010   3,854      9      0  /build/eglibc-ripdx6/eglibc-2.19/elf/do-rel.h:_dl_relocate_object
   96,775  1,580     3    54,510      0     0   9,085      0      0  ???:VLin2_Serial
   95,745      3     2    39,350      0     0  33,705      0      0  ???:SUNRsqrt
   93,366    746     3    51,072      4     0   8,778      0      0  ???:VSum_Serial
   89,250    196     2    35,700     38     1  26,775      0      0  ???:H5FL_fac_free
   84,208  2,432     2    39,888    464     0  26,592      0      0  ???:N_VDotProd
   83,426  2,566    12    38,166     20     0   6,817      0      0  ???:cvBDFStab
   83,328    141     1    41,664     60     1  27,776      0      0  ???:SUNRabs
   83,214    694    11    33,071    448     0   9,168     16      0  ???:H5T_cmp
   81,339  1,160     2    38,529    772     0  25,686      0      0  ???:N_VScale
   74,626  2,531    11    39,304     15     0   9,259      0      0  ???:cvSetBDF
   72,874  4,665     8    35,998    921     0  19,316      4      0  ???:CVSpilsDQJtimes
   67,133    713     9    33,798    214     0  29,607  1,647  1,350  ???:H5T_copy
   63,489  1,458     6    35,356      0     0   3,680      0      0  ???:cvPredict
   59,663     33     2    26,449    764     0  14,712      0      0  ???:H5FL_fac_malloc
   56,126     10    10    13,675  1,036   833      17      1      0  /build/eglibc-ripdx6/eglibc-2.19/elf/dl-addr.c:_dl_addr
   54,808    739     3    28,520      0     0  12,400      0      0  ???:N_VAbs_Serial
   53,447    554     6    12,906    627     0   9,710      4      0  ???:H5I_register
   53,352  5,541    17    34,327    107     0   9,219     48      0  ???:cvNewtonIteration
   52,363    871    26    12,463    413     6   8,706    148      1  ???:H5T_path_find
   51,203  1,779     8    30,490     73     0   5,368      0      0  ???:cvCompleteStep
   50,046  4,727     6    29,852      8     0   9,658      0      0  ???:CVSpilsATimes
   50,027  2,547     1    23,697     38     0  15,798      0      0  ???:N_VWrmsNorm
   49,865      0     0         0      0     0       0      0      0  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/wordsize-64/math_private.h:pow
   46,805      1     1     4,255      0     0   8,510      0      0  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/i386/fpu/fenv_private.h:__ieee754_pow_sse2
   46,189    491     2    25,688      0     0   4,693      0      0  ???:N_VInv_Serial
   45,122    459     8    11,618     27     0  15,007    141      0  ???:H5O_protect
   43,549  5,181    14    21,098      0     0   9,118     13      0  ???:cvSpilsSolve
   43,301    284     4    10,818     18     0   8,666      3      0  ???:H5AC_unprotect
   41,701    528     8    12,290  1,169     0   7,456     23      0  ???:H5P_get
   41,194    176     4     8,250    634     0       2      0      0  /build/eglibc-ripdx6/eglibc-2.19/malloc/malloc.c:free
   35,380    572     7    11,215     27     0   4,272      0      0  ???:H5I_remove
   34,874    733     3    20,041      0     0   2,299      0      0  ???:N_VMin_Serial
   33,360    547     6    13,443    698     0   8,658     38      0  ???:H5FL_blk_free
   33,351     71     3    11,466    774     0       3      0      0  ???:H5I_object

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/kwoksun2/dengo/dengo-project-dengo-ed14369817a2/dengo_data_structure/Untitled Folder/serial_performance_grid/eqH2/final/final/final__solver.C
--------------------------------------------------------------------------------
     Ir   I1mr ILmr      Dr  D1mr DLmr     Dw  D1mw DLmw 

-- line 11 ----------------------------------------
      .      .    .       .     .    .      .     .    .     will be fed into the solver.
      .      .    .       .     .    .      .     .    .  */
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  #include "final__solver.h"
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  final__data *final__setup_data(
      .      .    .       .     .    .      .     .    .      int *NumberOfFields, char ***FieldNames)
      6      0    0       0     0    0      4     1    0  {
      .      .    .       .     .    .      .     .    .      int i;
      .      .    .       .     .    .      .     .    .  
      3      1    1       0     0    0      2     1    0      final__data *data = (final__data *) malloc(sizeof(final__data));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      /* allocate space for the scale related pieces */
     34      1    1      21     0    0      1     0    0      for (i = 0; i< 10 ; i++){
     60      0    0      20     0    0     10     1    1      data->scale[i] = 1.0;
     60      0    0      20     0    0     10     2    2      data->inv_scale[i] = 1.0;
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      /*initialize temperature so it wont crash*/
      3      0    0       1     0    0      1     1    1      data->Ts[0] = 1000.0;
      3      1    1       1     0    0      1     1    1      data->logTs[0] = log(1000.0);
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      /* Temperature-related pieces */
      3      0    0       1     0    0      1     0    0      data->bounds[0] = 1.0;
      3      0    0       1     0    0      1     0    0      data->bounds[1] = 100000.0;
      2      0    0       1     0    0      1     0    0      data->nbins = 1024 - 1;
     20      2    2      10     0    0      6     0    0      data->dbin = (log(data->bounds[1]) - log(data->bounds[0])) / data->nbins;
     10      0    0       5     0    0      3     0    0      data->idbin = 1.0L / data->dbin;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      /* Redshift-related pieces */
      3      0    0       1     0    0      1     0    0      data->z_bounds[0] = 0.0;
      3      1    1       1     0    0      1     0    0      data->z_bounds[1] = 0.0;
      2      0    0       1     0    0      1     0    0      data->n_zbins = 0 - 1;
     20      1    1      10     1    1      4     0    0      data->d_zbin = (log(data->z_bounds[1] + 1.0) - log(data->z_bounds[0] + 1.0)) / data->n_zbins;
     10      1    1       5     0    0      3     0    0      data->id_zbin = 1.0L / data->d_zbin;
      .      .    .       .     .    .      .     .    .      
      3      0    0       1     0    0      1     0    0      final__read_rate_tables(data);
      6      1    0       1     1    0      1     0    0      fprintf(stderr, "Successfully read in rate tables.\n");
      .      .    .       .     .    .      .     .    .  
      3      1    1       1     1    0      1     0    0      final__read_cooling_tables(data);
      6      1    0       1     1    0      1     0    0      fprintf(stderr, "Successfully read in cooling rate tables.\n");
      .      .    .       .     .    .      .     .    .      
      3      0    0       1     1    0      1     0    0      final__read_gamma(data);
      6      2    1       1     1    0      1     0    0      fprintf(stderr, "Successfully read in gamma tables. \n");
      .      .    .       .     .    .      .     .    .  
      2      0    0       1     1    0      0     0    0      if (FieldNames != NULL && NumberOfFields != NULL) {
      .      .    .       .     .    .      .     .    .          NumberOfFields[0] = 10;
      .      .    .       .     .    .      .     .    .          FieldNames[0] = new char*[10];
      .      .    .       .     .    .      .     .    .          i = 0;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          FieldNames[0][i++] = strdup("H2_1");
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          FieldNames[0][i++] = strdup("H2_2");
      .      .    .       .     .    .      .     .    .          
-- line 65 ----------------------------------------
-- line 75 ----------------------------------------
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          FieldNames[0][i++] = strdup("He_3");
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          FieldNames[0][i++] = strdup("de");
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          FieldNames[0][i++] = strdup("ge");
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .      }
      1      1    0       1     0    0      0     0    0      return data;
      .      .    .       .     .    .      .     .    .  
      4      0    0       3     1    0      0     0    0  }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  int final__main(int argc, char** argv )
     12      2    2       0     0    0      9     0    0  {
      4      1    0       0     0    0      2     1    0      final__data *data = final__setup_data(NULL, NULL);
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      /* Initial conditions */
      .      .    .       .     .    .      .     .    .      hid_t file_id;
      2      0    0       1     1    0      0     0    0      if (argc < 2){
      9      2    1       0     0    0      3     1    0      file_id = H5Fopen("final__initial_conditions.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
      2      0    0       1     0    0      0     0    0      if (file_id < 0) {fprintf(stderr, "Failed to open "
      .      .    .       .     .    .      .     .    .          "final__initial_conditions.h5 so dying.\n");
      .      .    .       .     .    .      .     .    .          return(1);}
      .      .    .       .     .    .      .     .    .      } else {
      .      .    .       .     .    .      .     .    .          file_id = H5Fopen( argv[1], H5F_ACC_RDONLY, H5P_DEFAULT);
      .      .    .       .     .    .      .     .    .          if (file_id < 0) {fprintf(stderr, "Failed to open  your initial_conditions file so dying.\n");
      .      .    .       .     .    .      .     .    .          return(1);}
      .      .    .       .     .    .      .     .    .         
      .      .    .       .     .    .      .     .    .              
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      /* Allocate the correct number of cells */
      .      .    .       .     .    .      .     .    .      hsize_t dims; /* We have flat versus number of species */
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      /* Check gas energy to get the number of cells */
      6      2    2       1     1    0      1     0    0      fprintf(stderr, "Getting dimensionality from ge:\n");
      8      1    0       1     0    0      2     1    0      herr_t status = H5LTget_dataset_info(file_id, "/ge", &dims, NULL, NULL);
      2      1    1       1     0    0      0     0    0      if(status == -1) {
      .      .    .       .     .    .      .     .    .          fprintf(stderr, "Error opening initial conditions file.\n");
      .      .    .       .     .    .      .     .    .          return 1;
      .      .    .       .     .    .      .     .    .      }
      7      1    1       2     1    0      1     0    0      fprintf(stderr, "  ncells = % 3i\n", (int) dims);
      4      0    0       2     0    0      1     1    0      data->ncells = dims;
      .      .    .       .     .    .      .     .    .  
      1      0    0       0     0    0      1     0    0      int N = 10;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      double *atol, *rtol;
      8      1    1       2     0    0      2     0    0      atol = (double *) malloc(N * dims * sizeof(double));
      8      0    0       2     0    0      2     0    0      rtol = (double *) malloc(N * dims * sizeof(double));
      .      .    .       .     .    .      .     .    .  
      5      1    1       1     0    0      2     0    0      double *tics = (double *) malloc(dims * sizeof(double));
      8      0    0       2     0    0      2     0    0      double *ics = (double *) malloc(dims * N * sizeof(double));
      8      1    1       2     0    0      2     1    0      double *input = (double *) malloc(dims * N * sizeof(double));
      5      0    0       1     0    0      2     0    0      double *temp  = (double *) malloc(dims * sizeof(double) );
      .      .    .       .     .    .      .     .    .  
      1      1    1       0     0    0      1     0    0      unsigned int i = 0, j;
      .      .    .       .     .    .      .     .    .      
      6      0    0       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /H2_1\n");
      6      1    1       2     1    0      1     0    0      H5LTread_dataset_double(file_id, "/H2_1", tics);
     11      2    1       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      1    1       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     0    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "H2_1[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     1    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      1    1       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      0    0       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /H2_2\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/H2_2", tics);
     11      2    2       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      1    1       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "H2_2[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     1    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      1    1       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      0    0       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /H_1\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/H_1", tics);
     11      2    2       5     0    0      1     1    0      for (j = 0; j < dims; j++) {
     15      1    1       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "H_1[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     1    0      3     0    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      1    1       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /H_2\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/H_2", tics);
     11      2    2       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      1    1       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "H_2[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     1    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      1    1       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /H_m0\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/H_m0", tics);
     11      2    2       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      1    1       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "H_m0[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     2    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      1    1       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /He_1\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/He_1", tics);
     11      3    2       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      1    1       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "He_1[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     2    0      3     0    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      1    1       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /He_2\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/He_2", tics);
     11      2    1       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      2    2       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "He_2[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     2    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      1    1       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /He_3\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/He_3", tics);
     11      2    1       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      2    2       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "He_3[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     2    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      1    1       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /de\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/de", tics);
     11      2    1       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      2    2       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "de[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     2    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      6      1    1       1     0    0      1     0    0      fprintf(stderr, "Reading I.C. for /ge\n");
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/ge", tics);
     11      2    1       5     1    0      1     1    0      for (j = 0; j < dims; j++) {
     15      2    2       7     0    0      1     1    0          ics[j * N + i] = tics[j]; 
     17      1    1       8     1    0      1     1    0          atol[j * N + i] = tics[j] * 1e-09;
     11      1    1       4     0    0      1     1    0          rtol[j * N + i] = 1e-09;
      2      0    0       1     0    0      0     0    0          if(j==0) {
      .      .    .       .     .    .      .     .    .              fprintf(stderr, "ge[0] = %0.3g, atol => % 0.16g\n",
     19      1    1       9     2    0      3     1    0                      tics[j], atol[j]);
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .      }
      1      0    0       1     0    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      5      1    1       1     0    0      2     1    0      double *density = (double *) malloc(dims *sizeof(double) );
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/density", density);
      .      .    .       .     .    .      .     .    .  
      3      1    0       1     1    0      1     0    0      H5Fclose(file_id);
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      /*
      .      .    .       .     .    .      .     .    .       * Use free fall time, not the time specified by 
      .      .    .       .     .    .      .     .    .       * the network itself
      .      .    .       .     .    .      .     .    .       */
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      // double dtf = 299204917.32712233;
      .      .    .       .     .    .      .     .    .      double dtf, t0;
      2      1    0       0     0    0      1     1    0      t0 = 2.992e15;
      9      1    1       4     0    0      3     2    0      dtf = t0 / sqrt(density[0]);
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      // if the output time is specified,
      .      .    .       .     .    .      .     .    .      // it overrides the freefall time
      2      0    0       1     0    0      0     0    0      if (argc > 3){
      .      .    .       .     .    .      .     .    .          dtf = atof( argv[3] ); 
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .  
      2      1    1       0     0    0      1     0    0      double dt = -1.0;
      2      1    1       0     0    0      1     0    0      double z = -1.0;
    189      1    1      93     1    0     11     2    1      for (i = 0; i < dims * N; i++) input[i] = ics[i];
      .      .    .       .     .    .      .     .    .      double ttot;
     22      3    2      11     0    0      6     2    0      ttot = dengo_evolve_final_(dtf, dt, z, input, rtol, atol, dims, data, temp);
      .      .    .       .     .    .      .     .    .      
      6      1    1       3     0    0      0     0    0      if (ttot >= 0.999*dtf){
      7      0    0       1     1    0      1     0    0          fprintf(stderr, "successful = 1\n");
      .      .    .       .     .    .      .     .    .      } else {
      .      .    .       .     .    .      .     .    .          fprintf(stderr, "successful = 0\n");    
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      /* Write results to HDF5 file */
      .      .    .       .     .    .      .     .    .  
      2      1    1       1     0    0      0     0    0      if (argc < 3){
     11      2    1       0     0    0      3     1    0          file_id = H5Fcreate("final__solution.h5", H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
      .      .    .       .     .    .      .     .    .      } else{
      .      .    .       .     .    .      .     .    .          file_id = H5Fcreate( argv[2], H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      hsize_t dimsarr[1];
      2      1    1       1     1    0      1     1    0      dimsarr[0] = dims;
      1      0    0       0     0    0      1     0    0      i = 0;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     0    0      2     1    0      double H2_1[dims];
     11      1    1       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     0    0      1     0    0          H2_1[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      0    0       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /H2_1\n");
      8      1    1       2     0    0      1     0    0      H5LTmake_dataset_double(file_id, "/H2_1", 1, dimsarr, H2_1);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     1    0      6     3    0      double H2_2[dims];
     11      2    2       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          H2_2[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      0    0       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /H2_2\n");
      8      1    1       2     0    0      1     0    0      H5LTmake_dataset_double(file_id, "/H2_2", 1, dimsarr, H2_2);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     1    0      6     2    0      double H_1[dims];
     11      2    2       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          H_1[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      0    0       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /H_1\n");
      8      1    1       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/H_1", 1, dimsarr, H_1);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     1    0      6     3    0      double H_2[dims];
     11      2    2       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          H_2[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      0    0       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /H_2\n");
      8      1    1       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/H_2", 1, dimsarr, H_2);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     1    0      6     2    0      double H_m0[dims];
     11      2    2       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          H_m0[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      0    0       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /H_m0\n");
      8      1    1       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/H_m0", 1, dimsarr, H_m0);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     1    0      6     3    0      double He_1[dims];
     11      1    1       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          He_1[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      1    1       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /He_1\n");
      8      0    0       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/He_1", 1, dimsarr, He_1);
      1      1    1       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     1    0      6     2    0      double He_2[dims];
     11      1    1       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          He_2[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      1    1       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /He_2\n");
      8      0    0       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/He_2", 1, dimsarr, He_2);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     28      2    2       1     1    0      6     3    0      double He_3[dims];
     11      2    2       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          He_3[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      0    0       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /He_3\n");
      9      1    1       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/He_3", 1, dimsarr, He_3);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     27      2    2       1     1    0      6     2    0      double de[dims];
     11      2    2       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     1    0      1     0    0          de[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      0    0       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /de\n");
      9      1    1       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/de", 1, dimsarr, de);
      1      1    0       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
     27      2    2       1     1    0      6     3    0      double ge[dims];
     11      1    1       5     0    0      1     0    0      for (j = 0; j < dims; j++) {
     13      0    0       7     2    0      1     0    0          ge[j] = input[j * N + i]; 
      .      .    .       .     .    .      .     .    .      }
      6      1    1       1     1    0      1     0    0      fprintf(stderr, "Writing solution for /ge\n");
      9      0    0       2     1    0      1     0    0      H5LTmake_dataset_double(file_id, "/ge", 1, dimsarr, ge);
      1      1    1       1     1    0      0     0    0      i++;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      9      0    0       2     2    0      1     0    0      H5LTmake_dataset_double(file_id, "/T", 1, dimsarr, temp);
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      double time[1];
      2      1    0       1     1    0      1     1    0      time[0] = ttot;
      .      .    .       .     .    .      .     .    .      double timestep[1];
      2      1    1       1     1    0      1     0    0      timestep[0] = dt;
      8      0    0       1     1    0      1     0    0      H5LTset_attribute_double(file_id, "/", "time", time, 1); 
      8      2    1       1     0    0      1     0    0      H5LTset_attribute_double(file_id, "/", "timestep", timestep, 1);
      3      1    0       1     0    0      1     0    0      H5Fclose(file_id);
      .      .    .       .     .    .      .     .    .      
      3      1    0       1     1    0      1     0    0      free(temp);
      3      1    1       1     1    0      1     0    0      free(tics);
      3      0    0       1     0    0      1     0    0      free(ics);
      3      0    0       1     0    0      1     0    0      free(data);
      3      0    0       1     0    0      1     0    0      free(rtol);
      3      1    0       1     0    0      1     0    0      free(atol);
      3      0    0       1     0    0      1     0    0      free(input);
      .      .    .       .     .    .      .     .    .  
      2      0    0       0     0    0      0     0    0      return 0;
      8      0    0       7     2    0      0     0    0  }
      .      .    .       .     .    .      .     .    .   
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  double dengo_evolve_final_ (double dtf, double &dt, double z, double *input,
     11      2    2       0     0    0      9     1    0              double *rtol, double *atol, long long dims, final__data *data, double *temp_array ) {
      .      .    .       .     .    .      .     .    .      int i, j;
      .      .    .       .     .    .      .     .    .      hid_t file_id;
      .      .    .       .     .    .      .     .    .      /* fprintf(stderr, "  ncells = % 3i\n", (int) dims); */
      .      .    .       .     .    .      .     .    .  
      1      0    0       0     0    0      1     0    0      int N = 10;
      7      1    1       2     0    0      2     0    0      double *mdensity = (double *) malloc (dims * N * sizeof(double));
     11      1    1       5     0    0      1     0    0      for (i = 0; i<dims; i++) {
      3      0    0       2     0    0      1     0    0          j = i * N;
      7      1    1       2     0    0      1     0    0          mdensity[i] = 0;
      .      .    .       .     .    .      .     .    .          
     19      2    2       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     1    0      1     0    0          input[j] /= 2.01588 ;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      1    1       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     0    0      1     0    0          input[j] /= 2.01588 ;
      .      .    .       .     .    .      .     .    .          
      1      1    1       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      1    1       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     0    0      1     0    0          input[j] /= 1.00794 ;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      2    2       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     0    0      1     0    0          input[j] /= 1.00794 ;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      2    2       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     0    0      1     0    0          input[j] /= 1.00794 ;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      1    1       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     1    1      1     0    0          input[j] /= 4.002602 ;
      .      .    .       .     .    .      .     .    .          
      1      1    1       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      1    1       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     0    0      1     0    0          input[j] /= 4.002602 ;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      2    2       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     14      1    1       6     0    0      1     0    0          input[j] /= 4.002602 ;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
     19      2    2       8     0    0      1     0    0          mdensity[i] += input[j] ; 
     12      0    0       5     0    0      1     0    0          input[j] /= 1.0 ;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .      //ensure_electron_consistency(input, dims, N);
      .      .    .       .     .    .      .     .    .  
      1      0    0       0     0    0      1     0    0      rhs_f f = calculate_rhs_final_;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      #ifndef CVSPILS
      .      .    .       .     .    .      .     .    .      jac_f jf = calculate_jacobian_final_;
      .      .    .       .     .    .      .     .    .      #endif
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      #ifdef CVSPILS
      1      0    0       0     0    0      1     0    0      jac_f jf = calculate_JacTimesVec_final_;
      .      .    .       .     .    .      .     .    .      #endif
      .      .    .       .     .    .      .     .    .  
      8      1    1       4     0    0      1     0    0      if (dt < 0) dt = dtf / 1e0;
      3      0    0       2     0    0      1     1    0      data->current_z = z;
      1      0    0       0     0    0      1     0    0      int niter = 0;
      1      1    1       0     0    0      1     0    0      int siter = 0;
      2      0    0       0     0    0      1     0    0      double ttot = 0;
      7      0    0       2     0    0      2     0    0      double *scale = (double *) malloc(dims * N * sizeof(double));
      5      1    1       1     0    0      2     0    0      double *ttot_all = (double *) malloc( dims * sizeof(double) );
      .      .    .       .     .    .      .     .    .  
    209      1    1      93     0    0     11     0    0      for (i = 0; i < dims * N; i++) scale[i] = input[i];
      .      .    .       .     .    .      .     .    .     
      .      .    .       .     .    .      .     .    .      
      2      1    1       0     0    0      1     0    0      double floor_value = 1e-25;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      // Initialize a CVODE object, memory spaces
      .      .    .       .     .    .      .     .    .      // and attach rhs, jac to them
      .      .    .       .     .    .      .     .    .      int flag;
      2      0    0       0     0    0      1     0    0      double reltol = 1.0e-3;
      .      .    .       .     .    .      .     .    .      void *cvode_mem;
      1      0    0       0     0    0      1     0    0      int MAX_ITERATION = 1000; 
      .      .    .       .     .    .      .     .    .      double y[10];
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      SUNLinearSolver LS;
      .      .    .       .     .    .      .     .    .      SUNMatrix A;
      .      .    .       .     .    .      .     .    .      N_Vector y_vec, abstol;
      .      .    .       .     .    .      .     .    .      
      1      0    0       0     0    0      1     0    0      y_vec = NULL;   
      1      0    0       0     0    0      1     0    0      LS = NULL;
      1      0    0       0     0    0      1     0    0      A  = NULL;
      .      .    .       .     .    .      .     .    .      
      5      1    1       1     0    0      2     0    0      y_vec  = N_VNew_Serial(N);
      5      0    0       1     0    0      2     0    0      abstol = N_VNew_Serial(N); 
      .      .    .       .     .    .      .     .    .  
     45      1    1      32     0    0      1     0    0      for (i=0; i<N; i++) {
     90      1    1      40     0    0     10     0    0          NV_Ith_S(y_vec ,i)   = 1.0;
     90      0    0      40     0    0     10     0    0          NV_Ith_S(abstol,i)   = 1.0;
     40      0    0      10     0    0     10     0    0          y[i] = 1.0;
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .  
      8      1    1       2     0    0      2     0    0      A = SUNDenseMatrix(N, N);
      6      0    0       2     0    0      2     0    0      LS = SUNDenseLinearSolver(y_vec, A);
     16      1    1      10     0    0      5     0    0      cvode_mem = setup_cvode_solver( f, jf, N, data, LS, A, y_vec, reltol, abstol);
      .      .    .       .     .    .      .     .    .      
      3      1    1       2     0    0      1     0    0      double h_density = mdensity[0];
     11      3    2       5     0    0      1     0    0      for (int d = 0; d < dims; d++){
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          // copy array which can be passed to the solver
      .      .    .       .     .    .      .     .    .          /*
      .      .    .       .     .    .      .     .    .          for (i = 0; i < N; i++){ 
      .      .    .       .     .    .      .     .    .              // this is being passed around 
      .      .    .       .     .    .      .     .    .              // passively by the "dengo_rate_data" 
      .      .    .       .     .    .      .     .    .              // will have to fix it for openmp
      .      .    .       .     .    .      .     .    .              data->scale[i] = input[d*N + i];
      .      .    .       .     .    .      .     .    .              data->inv_scale[i] = 1.0 / input[d*N + i];
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .          */ 
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .          
     45      1    1      32     0    0      1     0    0          for (i = 0; i < N; i++){ 
      .      .    .       .     .    .      .     .    .              /*
      .      .    .       .     .    .      .     .    .              if ( i == 0  || i == 2){
      .      .    .       .     .    .      .     .    .                  data->scale[i] = mdensity[d]; //h_density;
      .      .    .       .     .    .      .     .    .                  data->inv_scale[i] = 1.0 / data->scale[i];
      .      .    .       .     .    .      .     .    .              
      .      .    .       .     .    .      .     .    .                  NV_Ith_S(y_vec , i )   = input[ d*N+i ] * data->inv_scale[i];
      .      .    .       .     .    .      .     .    .                  NV_Ith_S(abstol, i )   = NV_Ith_S(y_vec , i ) * reltol * reltol;
      .      .    .       .     .    .      .     .    .              
      .      .    .       .     .    .      .     .    .                  fprintf(stderr, "y_vec = %0.5g; abstol = %0.5g \n", NV_Ith_S(y_vec , i ), NV_Ith_S(abstol , i ));  
      .      .    .       .     .    .      .     .    .              }
      .      .    .       .     .    .      .     .    .              */
      .      .    .       .     .    .      .     .    .              // else{
    150      1    1      70     1    0     10     1    0                  data->scale[i]     = input[d*N + i];
    120      1    1      60     0    0     10     2    0                  data->inv_scale[i] = 1.0 / data->scale[i];
    240      2    2     120     0    0     10     0    0                  NV_Ith_S(y_vec , i )   = input[ d*N+i ] * data->inv_scale[i];
    100      0    0      60     0    0     10     0    0                  NV_Ith_S(abstol, i )   = reltol * reltol ;
      .      .    .       .     .    .      .     .    .              // }
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .          // initialize a dt for the solver  
      3      0    0       2     0    0      1     0    0          dt = dtf;
      2      1    1       0     0    0      1     0    0          ttot = 0.0;
      1      0    0       0     0    0      1     0    0          siter = 0;
      .      .    .       .     .    .      .     .    .              
      7      1    1       4     0    0      0     0    0          while (ttot < dtf) { 
      .      .    .       .     .    .      .     .    .              // fprintf(stderr, "%d th strip: %d iterations, time: %0.5g\n", d, siter, ttot );
      .      .    .       .     .    .      .     .    .              
     14      2    1       8     0    0      4     1    0              flag = cvode_solver( cvode_mem, y, N, &dt, data, y_vec, reltol, abstol);
      .      .    .       .     .    .      .     .    .  
     45      1    1      32     0    0      1     0    0              for (i = 0; i < N; i++) {
     60      0    0      20     0    0      0     0    0                  if (y[i] < 0) {
      .      .    .       .     .    .      .     .    .                      fprintf(stderr, "negative \n");
      .      .    .       .     .    .      .     .    .                      flag = 1;
      .      .    .       .     .    .      .     .    .                      break;
      .      .    .       .     .    .      .     .    .                  }
      .      .    .       .     .    .      .     .    .              }
      .      .    .       .     .    .      .     .    .  
      2      1    1       1     0    0      0     0    0              if (flag < 1){
     45      1    1      32     0    0      1     0    0                  for (i = 0; i < N; i++){
    140      1    1      70     1    0     10     0    0                      data->scale[i] = y[i] * data->scale[i];
    120      1    1      60     0    0     10     0    0                      data->inv_scale[i] = 1.0/ data->scale[i];
      .      .    .       .     .    .      .     .    .                      
     90      1    1      40     1    0     10     0    0                      NV_Ith_S(y_vec , i )   = 1.0;
    100      0    0      60     1    0     10     2    0                      NV_Ith_S(abstol, i )   = reltol * reltol ;
      .      .    .       .     .    .      .     .    .                      // fprintf(stderr , "data->scale[%d] = %0.5g \n", i,y[i]);
      .      .    .       .     .    .      .     .    .                  }
      .      .    .       .     .    .      .     .    .  
      5      0    0       3     1    0      1     0    0                  ttot += dt;
      5      1    1       3     0    0      1     0    0                  dt = dtf - ttot;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .              } else{
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .                  for (i = 0; i < N; i++){
      .      .    .       .     .    .      .     .    .                      NV_Ith_S(y_vec , i )   = 1.0;
      .      .    .       .     .    .      .     .    .                      NV_Ith_S(abstol, i )   = reltol * reltol ;
      .      .    .       .     .    .      .     .    .                  } 
      .      .    .       .     .    .      .     .    .                  dt /= 2.0;
      .      .    .       .     .    .      .     .    .                  dt = DMIN(dt * 1.1, dtf - ttot);
      .      .    .       .     .    .      .     .    .              }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  	        
      3      1    0       2     0    0      0     0    0              if (siter == MAX_ITERATION) break;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0              siter++;
      .      .    .       .     .    .      .     .    .          } // while loop for each strip
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          // fprintf(stderr, "%d the strip = %0.5g\n", d, ttot);
      8      1    1       4     0    0      1     1    0          temp_array[ d ] = data->Ts[0];
      7      0    0       3     0    0      1     1    0          ttot_all[d] = ttot;
      .      .    .       .     .    .      .     .    .  
     45      2    1      32     0    0      1     0    0          for (i = 0; i < N; i++){
    150      0    0      70     0    0     10     2    0              input[d*N +i] = data->scale[i] ;
      .      .    .       .     .    .      .     .    .              
      .      .    .       .     .    .      .     .    .          } // copy data back to the input array
      .      .    .       .     .    .      .     .    .      } // for d dims loop
      3      0    0       0     0    0      1     0    0      CVodeFree(&cvode_mem);
      3      0    0       1     0    0      1     0    0      SUNLinSolFree(LS);
      3      0    0       1     0    0      1     0    0      SUNMatDestroy(A);
      3      0    0       1     0    0      1     0    0      N_VDestroy(y_vec);
      3      1    1       1     0    0      1     0    0      N_VDestroy(abstol);
      3      0    0       1     0    0      1     0    0      free(scale);
      3      0    0       1     0    0      1     0    0      free(mdensity);
     11      1    1       5     0    0      1     0    0      for (i = 0; i<dims; i++) {
      3      1    1       2     0    0      1     0    0        j = i * N;
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 2.01588;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 2.01588;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 1.00794;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 1.00794;
      .      .    .       .     .    .      .     .    .          
      1      1    1       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 1.00794;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 4.002602;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 4.002602;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     14      1    1       6     0    0      1     0    0          input[j] *= 4.002602;
      .      .    .       .     .    .      .     .    .          
      1      1    1       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
     12      0    0       5     0    0      1     0    0          input[j] *= 1.0;
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .          
      1      0    0       1     0    0      0     0    0          j++;
      .      .    .       .     .    .      .     .    .        
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .  
      2      0    0       1     0    0      1     0    0      double dt_final = dtf;
      .      .    .       .     .    .      .     .    .      
     11      1    1       5     0    0      1     0    0      for (int d = 0; d < dims; d++){
      9      1    1       4     0    0      0     0    0          if (ttot_all[d] < dt_final) dt_final = ttot_all[d];    
      .      .    .       .     .    .      .     .    .      }
      3      0    0       1     0    0      1     0    0      free(ttot_all);
      .      .    .       .     .    .      .     .    .  
      1      0    0       1     0    0      0     0    0      return dt_final;
      4      1    0       3     0    0      1     0    0  }
      .      .    .       .     .    .      .     .    .   
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  void final__read_rate_tables(final__data *data)
      4      1    1       0     0    0      2     0    0  {
      9      2    1       0     0    0      3     0    0      hid_t file_id = H5Fopen("final__tables.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
      .      .    .       .     .    .      .     .    .      /* Allocate the correct number of rate tables */
      6      0    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k01", data->r_k01);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k02", data->r_k02);
      6      2    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k03", data->r_k03);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k04", data->r_k04);
      6      2    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k05", data->r_k05);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k06", data->r_k06);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k07", data->r_k07);
      6      2    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k08", data->r_k08);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k09", data->r_k09);
      6      2    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k10", data->r_k10);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k11", data->r_k11);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k12", data->r_k12);
      6      1    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k13", data->r_k13);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k14", data->r_k14);
      6      2    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k15", data->r_k15);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k16", data->r_k16);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k17", data->r_k17);
      6      1    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k18", data->r_k18);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k19", data->r_k19);
      6      2    1       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k21", data->r_k21);
      6      1    0       2     0    0      1     0    0      H5LTread_dataset_double(file_id, "/k22", data->r_k22);
      .      .    .       .     .    .      .     .    .  
      3      1    0       1     0    0      1     0    0      H5Fclose(file_id);
      2      1    0       2     0    0      0     0    0  }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  void final__read_cooling_tables(final__data *data)
      4      0    0       0     0    0      2     0    0  {
      .      .    .       .     .    .      .     .    .  
      9      2    1       0     0    0      3     0    0      hid_t file_id = H5Fopen("final__tables.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
      .      .    .       .     .    .      .     .    .      /* Allocate the correct number of rate tables */
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/brem_brem",
      6      1    1       2     0    0      1     0    0                              data->c_brem_brem);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/ceHeI_ceHeI",
      6      1    0       2     0    0      1     0    0                              data->c_ceHeI_ceHeI);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/ceHeII_ceHeII",
      6      1    0       2     0    0      1     0    0                              data->c_ceHeII_ceHeII);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/ceHI_ceHI",
      6      2    1       2     0    0      1     0    0                              data->c_ceHI_ceHI);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/ciHeI_ciHeI",
      6      0    0       2     0    0      1     0    0                              data->c_ciHeI_ciHeI);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/ciHeII_ciHeII",
      6      1    1       2     0    0      1     0    0                              data->c_ciHeII_ciHeII);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/ciHeIS_ciHeIS",
      6      0    0       2     0    0      1     0    0                              data->c_ciHeIS_ciHeIS);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/ciHI_ciHI",
      6      0    0       2     0    0      1     0    0                              data->c_ciHI_ciHI);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/compton_comp_",
      6      1    1       2     0    0      1     0    0                              data->c_compton_comp_);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gammah_gammah",
      6      1    0       2     0    0      1     0    0                              data->c_gammah_gammah);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_gael",
      6      2    1       2     0    0      1     0    0                              data->c_gloverabel08_gael);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_gaH2",
      6      1    0       2     0    0      1     0    0                              data->c_gloverabel08_gaH2);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_gaHe",
      6      1    0       2     0    0      1     0    0                              data->c_gloverabel08_gaHe);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_gaHI",
      6      1    1       2     0    0      1     0    0                              data->c_gloverabel08_gaHI);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_gaHp",
      6      1    0       2     0    0      1     0    0                              data->c_gloverabel08_gaHp);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_gphdl",
      6      2    1       2     0    0      1     0    0                              data->c_gloverabel08_gphdl);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_gpldl",
      6      1    0       2     0    0      1     0    0                              data->c_gloverabel08_gpldl);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gloverabel08_h2lte",
      6      1    0       2     0    0      1     0    0                              data->c_gloverabel08_h2lte);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/h2formation_h2mcool",
      6      1    1       2     0    0      1     0    0                              data->c_h2formation_h2mcool);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/h2formation_h2mheat",
      6      1    0       2     0    0      1     0    0                              data->c_h2formation_h2mheat);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/h2formation_ncrd1",
      6      2    1       2     0    0      1     0    0                              data->c_h2formation_ncrd1);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/h2formation_ncrd2",
      6      1    0       2     0    0      1     0    0                              data->c_h2formation_ncrd2);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/h2formation_ncrn",
      6      2    1       2     0    0      1     0    0                              data->c_h2formation_ncrn);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/reHeII1_reHeII1",
      6      1    0       2     0    0      1     0    0                              data->c_reHeII1_reHeII1);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/reHeII2_reHeII2",
      6      1    0       2     0    0      1     0    0                              data->c_reHeII2_reHeII2);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/reHeIII_reHeIII",
      6      2    1       2     0    0      1     0    0                              data->c_reHeIII_reHeIII);
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/reHII_reHII",
      6      1    0       2     0    0      1     0    0                              data->c_reHII_reHII);
      .      .    .       .     .    .      .     .    .  
      3      1    0       1     0    0      1     0    0      H5Fclose(file_id);
      2      0    0       2     0    0      0     0    0  }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  void final__read_gamma(final__data *data)
      4      1    1       0     0    0      2     0    0  {
      .      .    .       .     .    .      .     .    .  
      9      1    0       0     0    0      3     0    0      hid_t file_id = H5Fopen("final__tables.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
      .      .    .       .     .    .      .     .    .      /* Allocate the correct number of rate tables */
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gammaH2_1",
      6      1    1       2     0    0      1     0    0                              data->g_gammaH2_1 );
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/dgammaH2_1_dT",
      6      1    0       2     0    0      1     0    0                              data->g_dgammaH2_1_dT );   
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/gammaH2_2",
      6      1    0       2     0    0      1     0    0                              data->g_gammaH2_2 );
      .      .    .       .     .    .      .     .    .      H5LTread_dataset_double(file_id, "/dgammaH2_2_dT",
      6      2    1       2     0    0      1     0    0                              data->g_dgammaH2_2_dT );   
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      3      1    0       1     0    0      1     0    0      H5Fclose(file_id);
      .      .    .       .     .    .      .     .    .  
      2      0    0       2     0    0      0     0    0  }
      .      .    .       .     .    .      .     .    .   
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  void final__calculate_temperature(final__data *data,
      .      .    .       .     .    .      .     .    .                          double *input, int nstrip, int nchem)
  8,918  1,466    1       0     0    0  6,370     2    0  {
      .      .    .       .     .    .      .     .    .      int i, j;
      .      .    .       .     .    .      .     .    .      double density;
  2,548      0    0       0     0    0  1,274     0    0      double kb = 1.3806504e-16; // Boltzmann constant [erg/K]
  2,548      0    0       0     0    0  1,274     1    0      double mh = 1.67e-24;
  2,548      0    0       0     0    0  1,274     0    0      double gamma = 5.e0/3.e0;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
  2,548    395    1       0     0    0  1,274     0    0      double gammaH2 = 7.e0/5.e0; // Should be a function of temperature
      .      .    .       .     .    .      .     .    .      	   	     		// this is a temporary solution
      .      .    .       .     .    .      .     .    .      double T,x, expx, Tnew;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      /* Calculate total density */
      .      .    .       .     .    .      .     .    .      double H2_1;
-- line 834 ----------------------------------------
-- line 838 ----------------------------------------
      .      .    .       .     .    .      .     .    .      double H_m0;
      .      .    .       .     .    .      .     .    .      double He_1;
      .      .    .       .     .    .      .     .    .      double He_2;
      .      .    .       .     .    .      .     .    .      double He_3;
      .      .    .       .     .    .      .     .    .      double de;
      .      .    .       .     .    .      .     .    .      double ge;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
  1,274      0    0       0     0    0  1,274     0    0      i = 0;
  3,822      0    0   2,548     0    0  1,274     0    0      j = i * nchem;
      .      .    .       .     .    .      .     .    .      
  3,822      0    0   1,274     0    0  1,274     0    0      double *scale = data->scale;
 17,836  1,127    2   7,644     0    0  1,274     0    0      H2_1 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    395    1   7,644     0    0  1,274     0    0      H2_2 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    349    1   7,644     0    0  1,274     0    0      H_1 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    253    1   7,644     0    0  1,274     0    0      H_2 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    368    1   7,644     0    0  1,274     1    0      H_m0 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    725    2   7,644     0    0  1,274     0    0      He_1 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    255    1   7,644     0    0  1,274     0    0      He_2 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    219    1   7,644     0    0  1,274     0    0      He_3 = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    219    1   7,644     0    0  1,274     0    0      de = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 17,836    229    1   7,644     0    0  1,274     0    0      ge = input[j]*scale[j];
  1,274      0    0   1,274     0    0      0     0    0      j++;
      .      .    .       .     .    .      .     .    .      
 40,768    420    3  20,384     0    0  1,274     0    0      density = 2.01588*H2_1 + 2.01588*H2_2 + 1.00794*H_1 + 1.00794*H_2 + 1.00794*H_m0 + 4.002602*He_1 + 4.002602*He_2 + 4.002602*He_3;
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .      // Initiate the "guess" temperature
  7,644    255    1   3,822     1    0  1,274     0    0      T = data->Ts[i];
  5,096      0    0   2,548     0    0  1,274     0    0      Tnew = T + 1.0;
      .      .    .       .     .    .      .     .    .      double dge_dT;
      .      .    .       .     .    .      .     .    .      double dge;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      double gammaH2_1;
      .      .    .       .     .    .      .     .    .      double dgammaH2_1_dT;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      double gammaH2_2;
      .      .    .       .     .    .      .     .    .      double dgammaH2_2_dT;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .          
  2,548      0    0       0     0    0  1,274     0    0      double Tdiff = 1.0; 
 11,543  1,274    1   6,846     1    1      0     0    0      while ( Tdiff > 0.1 ){
      .      .    .       .     .    .      .     .    .          // We do Newton's Iteration to calculate the temperature
      .      .    .       .     .    .      .     .    .          // Since gammaH2 is dependent on the temperature too!
      .      .    .       .     .    .      .     .    .  
 12,894    219    1   6,447     0    0  2,149     0    0          T = data->Ts[i];
      .      .    .       .     .    .      .     .    .          
 10,745      0    0   4,298     0    0  2,149     1    0          final__interpolate_gamma(data, i);
      .      .    .       .     .    .      .     .    .          
 12,894    246    1   6,447     0    0  2,149     0    0          gammaH2_1 = data->gammaH2_1[i];
 12,894      0    0   6,447     0    0  2,149     0    0          dgammaH2_1_dT = data->dgammaH2_1_dT[i];
      .      .    .       .     .    .      .     .    .          // fprintf(stderr, ":gammaH2_1 %0.5g , dgammaH2_1_dT: %.5g \n", gammaH2_1, dgammaH2_1_dT  );
      .      .    .       .     .    .      .     .    .          
 12,894    593    1   6,447     0    0  2,149     0    0          gammaH2_2 = data->gammaH2_2[i];
 12,894      0    0   6,447     0    0  2,149     0    0          dgammaH2_2_dT = data->dgammaH2_2_dT[i];
      .      .    .       .     .    .      .     .    .          // fprintf(stderr, ":gammaH2_2 %0.5g , dgammaH2_2_dT: %.5g \n", gammaH2_2, dgammaH2_2_dT  );
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .         
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          // update gammaH2
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .          // The derivatives of  sum (nkT/(gamma - 1)/mh/density) - ge
      .      .    .       .     .    .      .     .    .          // This is the function we want to minimize
      .      .    .       .     .    .      .     .    .          // which should only be dependent on the first part
229,943 11,005   10 105,301     0    0 19,341     0    0          dge_dT = T*kb*(-H2_1*dgammaH2_1_dT/pow(gammaH2_1 - 1.0, 2) - H2_2*dgammaH2_2_dT/pow(gammaH2_2 - 1.0, 2))/(density*mh) + kb*(H2_1/(gammaH2_1 - 1.0) + H2_2/(gammaH2_2 - 1.0) + H_1/(gamma - 1.0) + H_2/(gamma - 1.0) + H_m0/(gamma - 1.0) + He_1/(gamma - 1.0) + He_2/(gamma - 1.0) + He_3/(gamma - 1.0) + de/(gamma - 1.0))/(density*mh);
      .      .    .       .     .    .      .     .    .          
      .      .    .       .     .    .      .     .    .          //This is the change in ge for each iteration
150,430  6,033    5  68,768     0    0  2,149     0    0          dge = T*kb*(H2_1/(gammaH2_1 - 1.0) + H2_2/(gammaH2_2 - 1.0) + H_1/(gamma - 1.0) + H_2/(gamma - 1.0) + H_m0/(gamma - 1.0) + He_1/(gamma - 1.0) + He_2/(gamma - 1.0) + He_3/(gamma - 1.0) + de/(gamma - 1.0))/(density*mh) - ge;
      .      .    .       .     .    .      .     .    .  
 12,894  1,274    1   6,447     0    0  2,149     0    0          Tnew = T - dge/dge_dT;
 12,894      0    0   6,447     0    0  2,149     0    0          data->Ts[i] = Tnew;
      .      .    .       .     .    .      .     .    .          
 10,745      0    0   6,447     0    0  2,149     0    0          Tdiff = fabs(T - Tnew);
      .      .    .       .     .    .      .     .    .          // fprintf(stderr, "T: %0.5g ; Tnew: %0.5g; dge_dT: %.5g, dge: %.5g, ge: %.5g \n", T,Tnew, dge_dT, dge, ge);
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .          // fprintf(stderr,"---------------------\n");
  7,644  1,167    1   3,822     0    0  1,274     0    0      data->Ts[i] = Tnew;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .          // fprintf(stderr,"T : %0.5g, density : %0.5g, d_gammaH2: %0.5g \n", Tnew, density, gammaH2 - 7./5.);
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
 11,466      0    0   6,370     0    0      0     0    0      if (data->Ts[i] < data->bounds[0]) {
      .      .    .       .     .    .      .     .    .          data->Ts[i] = data->bounds[0];
 11,466  1,714    2   6,370     0    0      0     0    0      } else if (data->Ts[i] > data->bounds[1]) {
      .      .    .       .     .    .      .     .    .          data->Ts[i] = data->bounds[1];
      .      .    .       .     .    .      .     .    .      }
 19,110  1,098    2   8,918     0    0  5,096     0    0      data->logTs[i] = log(data->Ts[i]);
 15,288    483    1   7,644     0    0  1,274     0    0      data->invTs[i] = 1.0 / data->Ts[i];
      .      .    .       .     .    .      .     .    .  	data->dTs_ge[i] = 
 89,180  2,500    6  40,768     0    0  1,274     0    0      density*mh/(kb*(H2_1/(gammaH2 - 1.0) + H2_2/(gammaH2 - 1.0) + H_1/(gamma - 1.0) + H_2/(gamma - 1.0) + H_m0/(gamma - 1.0) + He_1/(gamma - 1.0) + He_2/(gamma - 1.0) + He_3/(gamma - 1.0) + de/(gamma - 1.0)));
      .      .    .       .     .    .      .     .    .          /*fprintf(stderr, "T[%d] = % 0.16g, density = % 0.16g\n",
      .      .    .       .     .    .      .     .    .                  i, data->Ts[i], density);*/
      .      .    .       .     .    .      .     .    .           
  2,548      0    0   2,548     0    0      0     0    0  }
      .      .    .       .     .    .      .     .    .   
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  /*
      .      .    .       .     .    .      .     .    .     This setup may be different than the user may anticipate, as a result
      .      .    .       .     .    .      .     .    .     of the lockstep timestep we use for a pencil beam through the grid.
      .      .    .       .     .    .      .     .    .     As such, it accepts the number of things to interpolate and makes
      .      .    .       .     .    .      .     .    .     assumptions about the sizes of the rates.
      .      .    .       .     .    .      .     .    .  */
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  /* This also requires no templating other than for the solver name...*/
      .      .    .       .     .    .      .     .    .  void final__interpolate_rates(final__data *data,
      .      .    .       .     .    .      .     .    .                      int nstrip)
  6,370      0    0       0     0    0  3,822     0    0  {
      .      .    .       .     .    .      .     .    .      int i, bin_id, zbin_id;
      .      .    .       .     .    .      .     .    .      double lb, t1, t2;
      .      .    .       .     .    .      .     .    .      double lbz, z1, z2;
  1,274      0    0       0     0    0  1,274     0    0      int no_photo = 0;
 10,192    187    1   5,096     0    0  5,096     0    0      lb = log(data->bounds[0]);
 10,192      0    0   5,096     0    0  3,822     0    0      lbz = log(data->z_bounds[0] + 1.0);
      .      .    .       .     .    .      .     .    .  
  1,274      0    0       0     0    0  1,274     0    0      i = 0;
 21,658    553    1  11,466     0    0  2,548     0    0      data->bin_id[i] = bin_id = (int) (data->idbin * (data->logTs[i] - lb));
  8,918    578    1   3,822     0    0      0     0    0      if (data->bin_id[i] <= 0) {
      .      .    .       .     .    .      .     .    .          data->bin_id[i] = 0;
 11,466    937    1   6,370     0    0      0     0    0      } else if (data->bin_id[i] >= data->nbins) {
      .      .    .       .     .    .      .     .    .          data->bin_id[i] = data->nbins - 1;
      .      .    .       .     .    .      .     .    .      }
  7,644    194    1   5,096     0    0  1,274     0    0      t1 = (lb + (bin_id    ) * data->dbin);
 10,192      0    0   5,096     0    0  1,274     0    0      t2 = (lb + (bin_id + 1) * data->dbin);
 17,836    344    1  10,192     0    0  1,274     0    0      data->Tdef[i] = (data->logTs[i] - t1)/(t2 - t1);
  8,918      0    0   5,096     0    0  1,274     0    0      data->dT[i] = (t2 - t1);
      .      .    .       .     .    .      .     .    .      /*fprintf(stderr, "INTERP: %d, bin_id = %d, dT = % 0.16g, T = % 0.16g, logT = % 0.16g\n",
      .      .    .       .     .    .      .     .    .                  i, data->bin_id[i], data->dT[i], data->Ts[i],
      .      .    .       .     .    .      .     .    .                  data->logTs[i]);*/
      .      .    .       .     .    .      .     .    .      
  7,644    357    1   5,096     0    0      0     0    0      if ((data->current_z >= data->z_bounds[0]) && (data->current_z < data->z_bounds[1])) {
      .      .    .       .     .    .      .     .    .          zbin_id = (int) (data->id_zbin * (log(data->current_z + 1.0) - lbz));
      .      .    .       .     .    .      .     .    .          if (zbin_id <= 0) {
      .      .    .       .     .    .      .     .    .              zbin_id = 0;
      .      .    .       .     .    .      .     .    .          } else if (zbin_id >= data->n_zbins) {
      .      .    .       .     .    .      .     .    .              zbin_id = data->n_zbins - 1;
      .      .    .       .     .    .      .     .    .          }
      .      .    .       .     .    .      .     .    .          z1 = (lbz + (zbin_id    ) * data->d_zbin);
      .      .    .       .     .    .      .     .    .          z2 = (lbz + (zbin_id + 1) * data->d_zbin);
      .      .    .       .     .    .      .     .    .          data->zdef = (log(data->current_z + 1.0) - z1)/(z2 - z1);
      .      .    .       .     .    .      .     .    .          data->dz = (exp(z2) - exp(z1)); //note: given this, we don't have to divide rate of change by z
      .      .    .       .     .    .      .     .    .      } else {
  1,274  1,274    1       0     0    0  1,274     0    0          no_photo = 1;
      .      .    .       .     .    .      .     .    .      }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
  7,644      0    0   3,822     0    0  1,274     0    0      bin_id = data->bin_id[i];
      .      .    .       .     .    .      .     .    .      
  7,644    733    1   3,822    56    0      0     0    0          data->rs_k01[i] = data->r_k01[bin_id] +
 29,302    395    1  14,014    16    0  1,274 1,215    0              data->Tdef[i] * (data->r_k01[bin_id+1] - data->r_k01[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k01[i] = (data->r_k01[bin_id+1] - data->r_k01[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k01[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k01[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    71    0      0     0    0          data->rs_k02[i] = data->r_k02[bin_id] +
 29,302  1,128    2  14,014    24    0  1,274 1,215    0              data->Tdef[i] * (data->r_k02[bin_id+1] - data->r_k02[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k02[i] = (data->r_k02[bin_id+1] - data->r_k02[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k02[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k02[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    96    0      0     0    0          data->rs_k03[i] = data->r_k03[bin_id] +
 29,302  1,127    2  14,014    15    0  1,274 1,274    0              data->Tdef[i] * (data->r_k03[bin_id+1] - data->r_k03[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k03[i] = (data->r_k03[bin_id+1] - data->r_k03[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k03[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k03[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822   106    0      0     0    0          data->rs_k04[i] = data->r_k04[bin_id] +
 29,302    744    2  14,014    12    0  1,274 1,274    0              data->Tdef[i] * (data->r_k04[bin_id+1] - data->r_k04[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k04[i] = (data->r_k04[bin_id+1] - data->r_k04[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k04[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k04[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822   101    0      0     0    0          data->rs_k05[i] = data->r_k05[bin_id] +
 29,302    621    2  14,014    11    0  1,274 1,274    0              data->Tdef[i] * (data->r_k05[bin_id+1] - data->r_k05[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k05[i] = (data->r_k05[bin_id+1] - data->r_k05[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k05[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k05[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    95    0      0     0    0          data->rs_k06[i] = data->r_k06[bin_id] +
 29,302    725    2  14,014    15    0  1,274 1,274    0              data->Tdef[i] * (data->r_k06[bin_id+1] - data->r_k06[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k06[i] = (data->r_k06[bin_id+1] - data->r_k06[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k06[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k06[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    88    0      0     0    0          data->rs_k07[i] = data->r_k07[bin_id] +
 29,302    474    2  14,014     9    0  1,274     3    0              data->Tdef[i] * (data->r_k07[bin_id+1] - data->r_k07[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k07[i] = (data->r_k07[bin_id+1] - data->r_k07[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k07[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k07[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    78    0      0     0    0          data->rs_k08[i] = data->r_k08[bin_id] +
 29,302    448    2  14,014    11    0  1,274     3    0              data->Tdef[i] * (data->r_k08[bin_id+1] - data->r_k08[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k08[i] = (data->r_k08[bin_id+1] - data->r_k08[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k08[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k08[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    76    0      0     0    0          data->rs_k09[i] = data->r_k09[bin_id] +
 29,302    175    2  14,014    10    0  1,274   365    0              data->Tdef[i] * (data->r_k09[bin_id+1] - data->r_k09[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k09[i] = (data->r_k09[bin_id+1] - data->r_k09[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k09[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k09[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    77    0      0     0    0          data->rs_k10[i] = data->r_k10[bin_id] +
 29,302    500    2  14,014    12    0  1,274   365    0              data->Tdef[i] * (data->r_k10[bin_id+1] - data->r_k10[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k10[i] = (data->r_k10[bin_id+1] - data->r_k10[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k10[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k10[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    75    0      0     0    0          data->rs_k11[i] = data->r_k11[bin_id] +
 29,302    465    2  14,014     4    0  1,274     1    0              data->Tdef[i] * (data->r_k11[bin_id+1] - data->r_k11[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k11[i] = (data->r_k11[bin_id+1] - data->r_k11[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k11[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k11[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    72    0      0     0    0          data->rs_k12[i] = data->r_k12[bin_id] +
 29,302    849    2  14,014     7    0  1,274   133    0              data->Tdef[i] * (data->r_k12[bin_id+1] - data->r_k12[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k12[i] = (data->r_k12[bin_id+1] - data->r_k12[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k12[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k12[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    66    0      0     0    0          data->rs_k13[i] = data->r_k13[bin_id] +
 29,302  2,548    2  14,014     9    0  1,274   133    0              data->Tdef[i] * (data->r_k13[bin_id+1] - data->r_k13[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k13[i] = (data->r_k13[bin_id+1] - data->r_k13[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k13[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k13[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822    62    0      0     0    0          data->rs_k14[i] = data->r_k14[bin_id] +
 29,302  1,274    1  14,014    15    0  1,274   133    0              data->Tdef[i] * (data->r_k14[bin_id+1] - data->r_k14[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k14[i] = (data->r_k14[bin_id+1] - data->r_k14[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k14[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k14[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,134    1   3,822    64    0      0     0    0          data->rs_k15[i] = data->r_k15[bin_id] +
 29,302    989    1  14,014     6    0  1,274     1    0              data->Tdef[i] * (data->r_k15[bin_id+1] - data->r_k15[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k15[i] = (data->r_k15[bin_id+1] - data->r_k15[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k15[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k15[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644    983    1   3,822    59    0      0     0    0          data->rs_k16[i] = data->r_k16[bin_id] +
 29,302  1,274    1  14,014     8    0  1,274     8    0              data->Tdef[i] * (data->r_k16[bin_id+1] - data->r_k16[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k16[i] = (data->r_k16[bin_id+1] - data->r_k16[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k16[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k16[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,274    1   3,822    57    0      0     0    0          data->rs_k17[i] = data->r_k17[bin_id] +
 29,302  1,274    1  14,014     7    0  1,274     8    0              data->Tdef[i] * (data->r_k17[bin_id+1] - data->r_k17[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k17[i] = (data->r_k17[bin_id+1] - data->r_k17[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k17[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k17[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,274    1   3,822    58    0      0     0    0          data->rs_k18[i] = data->r_k18[bin_id] +
 29,302  1,274    1  14,014    44    0  1,274     8    0              data->Tdef[i] * (data->r_k18[bin_id+1] - data->r_k18[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k18[i] = (data->r_k18[bin_id+1] - data->r_k18[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k18[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k18[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644    937    1   3,822    90    0      0     0    0          data->rs_k19[i] = data->r_k19[bin_id] +
 29,302  1,274    1  14,014     6    0  1,274     1    0              data->Tdef[i] * (data->r_k19[bin_id+1] - data->r_k19[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k19[i] = (data->r_k19[bin_id+1] - data->r_k19[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k19[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k19[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,274    1   3,822    90    0      0     0    0          data->rs_k21[i] = data->r_k21[bin_id] +
 29,302  1,274    1  14,014     5    0  1,274     2    0              data->Tdef[i] * (data->r_k21[bin_id+1] - data->r_k21[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k21[i] = (data->r_k21[bin_id+1] - data->r_k21[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k21[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k21[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,274    1   3,822    87    0      0     0    0          data->rs_k22[i] = data->r_k22[bin_id] +
 29,302  1,167    1  14,014     4    0  1,274     2    0              data->Tdef[i] * (data->r_k22[bin_id+1] - data->r_k22[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k22[i] = (data->r_k22[bin_id+1] - data->r_k22[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->drs_k22[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->drs_k22[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644    857    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    82    0      0     0    0          data->cs_brem_brem[i] = data->c_brem_brem[bin_id] +
 29,302  1,953    2  14,014    70    0  1,274     2    0              data->Tdef[i] * (data->c_brem_brem[bin_id+1] - data->c_brem_brem[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_brem_brem[i] = (data->c_brem_brem[bin_id+1] - data->c_brem_brem[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_brem_brem[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_brem_brem[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   114    0      0     0    0          data->cs_ceHeI_ceHeI[i] = data->c_ceHeI_ceHeI[bin_id] +
 29,302    485    2  14,014     4    0  1,274     1    0              data->Tdef[i] * (data->c_ceHeI_ceHeI[bin_id+1] - data->c_ceHeI_ceHeI[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_ceHeI_ceHeI[i] = (data->c_ceHeI_ceHeI[bin_id+1] - data->c_ceHeI_ceHeI[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_ceHeI_ceHeI[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_ceHeI_ceHeI[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    255    1   3,822   110    0      0     0    0          data->cs_ceHeII_ceHeII[i] = data->c_ceHeII_ceHeII[bin_id] +
 29,302    245    1  14,014     7    0  1,274     1    0              data->Tdef[i] * (data->c_ceHeII_ceHeII[bin_id+1] - data->c_ceHeII_ceHeII[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_ceHeII_ceHeII[i] = (data->c_ceHeII_ceHeII[bin_id+1] - data->c_ceHeII_ceHeII[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_ceHeII_ceHeII[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_ceHeII_ceHeII[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644    522    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   112    0      0     0    0          data->cs_ceHI_ceHI[i] = data->c_ceHI_ceHI[bin_id] +
 29,302  1,222    2  14,014     3    0  1,274     3    0              data->Tdef[i] * (data->c_ceHI_ceHI[bin_id+1] - data->c_ceHI_ceHI[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_ceHI_ceHI[i] = (data->c_ceHI_ceHI[bin_id+1] - data->c_ceHI_ceHI[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_ceHI_ceHI[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_ceHI_ceHI[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   114    0      0     0    0          data->cs_ciHeI_ciHeI[i] = data->c_ciHeI_ciHeI[bin_id] +
 29,302    443    2  14,014    91    0  1,274     3    0              data->Tdef[i] * (data->c_ciHeI_ciHeI[bin_id+1] - data->c_ciHeI_ciHeI[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHeI_ciHeI[i] = (data->c_ciHeI_ciHeI[bin_id+1] - data->c_ciHeI_ciHeI[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHeI_ciHeI[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_ciHeI_ciHeI[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    553    1   3,822   124    0      0     0    0          data->cs_ciHeII_ciHeII[i] = data->c_ciHeII_ciHeII[bin_id] +
 29,302    578    1  14,014     7    0  1,274     1    0              data->Tdef[i] * (data->c_ciHeII_ciHeII[bin_id+1] - data->c_ciHeII_ciHeII[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHeII_ciHeII[i] = (data->c_ciHeII_ciHeII[bin_id+1] - data->c_ciHeII_ciHeII[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHeII_ciHeII[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_ciHeII_ciHeII[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644    937    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   128    0      0     0    0          data->cs_ciHeIS_ciHeIS[i] = data->c_ciHeIS_ciHeIS[bin_id] +
 29,302    538    2  14,014     3    0  1,274     1    0              data->Tdef[i] * (data->c_ciHeIS_ciHeIS[bin_id+1] - data->c_ciHeIS_ciHeIS[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHeIS_ciHeIS[i] = (data->c_ciHeIS_ciHeIS[bin_id+1] - data->c_ciHeIS_ciHeIS[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHeIS_ciHeIS[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_ciHeIS_ciHeIS[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   126    0      0     0    0          data->cs_ciHI_ciHI[i] = data->c_ciHI_ciHI[bin_id] +
 29,302    574    2  14,014     9    0  1,274     6    0              data->Tdef[i] * (data->c_ciHI_ciHI[bin_id+1] - data->c_ciHI_ciHI[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHI_ciHI[i] = (data->c_ciHI_ciHI[bin_id+1] - data->c_ciHI_ciHI[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_ciHI_ciHI[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_ciHI_ciHI[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    395    1   3,822   136    0      0     0    0          data->cs_compton_comp_[i] = data->c_compton_comp_[bin_id] +
 29,302    732    1  14,014   162    0  1,274     6    0              data->Tdef[i] * (data->c_compton_comp_[bin_id+1] - data->c_compton_comp_[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_compton_comp_[i] = (data->c_compton_comp_[bin_id+1] - data->c_compton_comp_[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_compton_comp_[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_compton_comp_[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,273    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   315    0      0     0    0          data->cs_gammah_gammah[i] = data->c_gammah_gammah[bin_id] +
 29,302  1,669    2  14,014    12    0  1,274    18    0              data->Tdef[i] * (data->c_gammah_gammah[bin_id+1] - data->c_gammah_gammah[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gammah_gammah[i] = (data->c_gammah_gammah[bin_id+1] - data->c_gammah_gammah[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gammah_gammah[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gammah_gammah[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   325    0      0     0    0          data->cs_gloverabel08_gael[i] = data->c_gloverabel08_gael[bin_id] +
 29,302  1,466    2  14,014     7    0  1,274     6    0              data->Tdef[i] * (data->c_gloverabel08_gael[bin_id+1] - data->c_gloverabel08_gael[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gael[i] = (data->c_gloverabel08_gael[bin_id+1] - data->c_gloverabel08_gael[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gael[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_gael[i] *= data->invTs[i];
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    395    1   3,822   333    0      0     0    0          data->cs_gloverabel08_gaH2[i] = data->c_gloverabel08_gaH2[bin_id] +
 29,302    732    1  14,014     5    0  1,274    18    0              data->Tdef[i] * (data->c_gloverabel08_gaH2[bin_id+1] - data->c_gloverabel08_gaH2[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaH2[i] = (data->c_gloverabel08_gaH2[bin_id+1] - data->c_gloverabel08_gaH2[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaH2[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_gaH2[i] *= data->invTs[i];
  7,644    395    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   321    0      0     0    0          data->cs_gloverabel08_gaHe[i] = data->c_gloverabel08_gaHe[bin_id] +
 29,302    744    2  14,014     4    0  1,274    18    0              data->Tdef[i] * (data->c_gloverabel08_gaHe[bin_id+1] - data->c_gloverabel08_gaHe[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaHe[i] = (data->c_gloverabel08_gaHe[bin_id+1] - data->c_gloverabel08_gaHe[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaHe[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_gaHe[i] *= data->invTs[i];
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    50    0      0     0    0          data->cs_gloverabel08_gaHI[i] = data->c_gloverabel08_gaHI[bin_id] +
 29,302    621    2  14,014     6    0  1,274    13    0              data->Tdef[i] * (data->c_gloverabel08_gaHI[bin_id+1] - data->c_gloverabel08_gaHI[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaHI[i] = (data->c_gloverabel08_gaHI[bin_id+1] - data->c_gloverabel08_gaHI[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaHI[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_gaHI[i] *= data->invTs[i];
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    481    1   3,822    45    0      0     0    0          data->cs_gloverabel08_gaHp[i] = data->c_gloverabel08_gaHp[bin_id] +
 29,302    244    1  14,014     6    0  1,274    13    0              data->Tdef[i] * (data->c_gloverabel08_gaHp[bin_id+1] - data->c_gloverabel08_gaHp[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaHp[i] = (data->c_gloverabel08_gaHp[bin_id+1] - data->c_gloverabel08_gaHp[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gaHp[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_gaHp[i] *= data->invTs[i];
  7,644    255    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    47    0      0     0    0          data->cs_gloverabel08_gphdl[i] = data->c_gloverabel08_gphdl[bin_id] +
 29,302    438    2  14,014     3    0  1,274    78    0              data->Tdef[i] * (data->c_gloverabel08_gphdl[bin_id+1] - data->c_gloverabel08_gphdl[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gphdl[i] = (data->c_gloverabel08_gphdl[bin_id+1] - data->c_gloverabel08_gphdl[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gphdl[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_gphdl[i] *= data->invTs[i];
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    41    0      0     0    0          data->cs_gloverabel08_gpldl[i] = data->c_gloverabel08_gpldl[bin_id] +
 29,302    288    2  14,014     4    0  1,274    78    0              data->Tdef[i] * (data->c_gloverabel08_gpldl[bin_id+1] - data->c_gloverabel08_gpldl[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gpldl[i] = (data->c_gloverabel08_gpldl[bin_id+1] - data->c_gloverabel08_gpldl[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_gpldl[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_gpldl[i] *= data->invTs[i];
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    116    1   3,822    43    0      0     0    0          data->cs_gloverabel08_h2lte[i] = data->c_gloverabel08_h2lte[bin_id] +
 29,302    245    1  14,014     5    0  1,274    38    0              data->Tdef[i] * (data->c_gloverabel08_h2lte[bin_id+1] - data->c_gloverabel08_h2lte[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_h2lte[i] = (data->c_gloverabel08_h2lte[bin_id+1] - data->c_gloverabel08_h2lte[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_gloverabel08_h2lte[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_gloverabel08_h2lte[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644    255    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    44    0      0     0    0          data->cs_h2formation_h2mcool[i] = data->c_h2formation_h2mcool[bin_id] +
 29,302    465    2  14,014     3    0  1,274    18    0              data->Tdef[i] * (data->c_h2formation_h2mcool[bin_id+1] - data->c_h2formation_h2mcool[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_h2mcool[i] = (data->c_h2formation_h2mcool[bin_id+1] - data->c_h2formation_h2mcool[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_h2mcool[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_h2formation_h2mcool[i] *= data->invTs[i];
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    593    1   3,822    39    0      0     0    0          data->cs_h2formation_h2mheat[i] = data->c_h2formation_h2mheat[bin_id] +
 29,302    256    1  14,014     3    0  1,274    17    0              data->Tdef[i] * (data->c_h2formation_h2mheat[bin_id+1] - data->c_h2formation_h2mheat[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_h2mheat[i] = (data->c_h2formation_h2mheat[bin_id+1] - data->c_h2formation_h2mheat[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_h2mheat[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_h2formation_h2mheat[i] *= data->invTs[i];
  7,644  1,274    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    36    0      0     0    0          data->cs_h2formation_ncrd1[i] = data->c_h2formation_ncrd1[bin_id] +
 29,302  1,274    1  14,014     6    0  1,274    38    0              data->Tdef[i] * (data->c_h2formation_ncrd1[bin_id+1] - data->c_h2formation_ncrd1[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_ncrd1[i] = (data->c_h2formation_ncrd1[bin_id+1] - data->c_h2formation_ncrd1[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_ncrd1[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_h2formation_ncrd1[i] *= data->invTs[i];
  7,644  1,274    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    39    0      0     0    0          data->cs_h2formation_ncrd2[i] = data->c_h2formation_ncrd2[bin_id] +
 29,302  2,123    2  14,014     4    0  1,274    15    0              data->Tdef[i] * (data->c_h2formation_ncrd2[bin_id+1] - data->c_h2formation_ncrd2[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_ncrd2[i] = (data->c_h2formation_ncrd2[bin_id+1] - data->c_h2formation_ncrd2[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_ncrd2[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_h2formation_ncrd2[i] *= data->invTs[i];
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644    983    1   3,822    36    0      0     0    0          data->cs_h2formation_ncrn[i] = data->c_h2formation_ncrn[bin_id] +
 29,302  1,274    1  14,014     6    0  1,274    47    0              data->Tdef[i] * (data->c_h2formation_ncrn[bin_id+1] - data->c_h2formation_ncrn[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_ncrn[i] = (data->c_h2formation_ncrn[bin_id+1] - data->c_h2formation_ncrn[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_h2formation_ncrn[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_h2formation_ncrn[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,274    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    38    0      0     0    0          data->cs_reHeII1_reHeII1[i] = data->c_reHeII1_reHeII1[bin_id] +
 29,302  2,548    2  14,014     2    0  1,274    76    0              data->Tdef[i] * (data->c_reHeII1_reHeII1[bin_id+1] - data->c_reHeII1_reHeII1[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_reHeII1_reHeII1[i] = (data->c_reHeII1_reHeII1[bin_id+1] - data->c_reHeII1_reHeII1[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_reHeII1_reHeII1[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_reHeII1_reHeII1[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822    56    0      0     0    0          data->cs_reHeII2_reHeII2[i] = data->c_reHeII2_reHeII2[bin_id] +
 29,302  2,211    2  14,014   237    0  1,274    76    0              data->Tdef[i] * (data->c_reHeII2_reHeII2[bin_id+1] - data->c_reHeII2_reHeII2[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_reHeII2_reHeII2[i] = (data->c_reHeII2_reHeII2[bin_id+1] - data->c_reHeII2_reHeII2[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_reHeII2_reHeII2[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_reHeII2_reHeII2[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644  1,274    1   3,822   655    0      0     0    0          data->cs_reHeIII_reHeIII[i] = data->c_reHeIII_reHeIII[bin_id] +
 29,302  1,274    1  14,014    45    0  1,274    78    0              data->Tdef[i] * (data->c_reHeIII_reHeIII[bin_id+1] - data->c_reHeIII_reHeIII[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_reHeIII_reHeIII[i] = (data->c_reHeIII_reHeIII[bin_id+1] - data->c_reHeIII_reHeIII[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_reHeIII_reHeIII[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_reHeIII_reHeIII[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
  7,644  1,274    1   3,822     0    0  1,274     0    0          bin_id = data->bin_id[i];
  7,644      0    0   3,822   728    0      0     0    0          data->cs_reHII_reHII[i] = data->c_reHII_reHII[bin_id] +
 29,302  1,274    1  14,014    25    0  1,274     0    0              data->Tdef[i] * (data->c_reHII_reHII[bin_id+1] - data->c_reHII_reHII[bin_id]);
      .      .    .       .     .    .      .     .    .          // data->dcs_reHII_reHII[i] = (data->c_reHII_reHII[bin_id+1] - data->c_reHII_reHII[bin_id]);;
      .      .    .       .     .    .      .     .    .          // data->dcs_reHII_reHII[i] /= data->dT[i];
      .      .    .       .     .    .      .     .    .  	// data->dcs_reHII_reHII[i] *= data->invTs[i];
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
  2,548      0    0   2,548     0    0      0     0    0  }
      .      .    .       .     .    .      .     .    .   
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  void final__interpolate_gamma(final__data *data,
      .      .    .       .     .    .      .     .    .                      int i)
 10,745     45    1       0     0    0  6,447     2    0  {   
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      /*
      .      .    .       .     .    .      .     .    .       * find the bin_id for the given temperature 
      .      .    .       .     .    .      .     .    .       * update dT for i_th strip
      .      .    .       .     .    .      .     .    .       */
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      int bin_id, zbin_id;
      .      .    .       .     .    .      .     .    .      double lb, t1, t2;
      .      .    .       .     .    .      .     .    .      double lbz, z1, z2;
  2,149      0    0       0     0    0  2,149     0    0      int no_photo = 0;
 17,192      0    0   8,596     1    0  8,596     1    0      lb = log(data->bounds[0]);
 17,192    857    1   8,596     0    0  6,447     0    0      lbz = log(data->z_bounds[0] + 1.0);
      .      .    .       .     .    .      .     .    .      
 36,533    857    1  19,341 1,215    0  4,298     1    0      data->bin_id[i] = bin_id = (int) (data->idbin * (data->logTs[i] - lb));
 15,043  1,096    1   6,447     0    0      0     0    0      if (data->bin_id[i] <= 0) {
      .      .    .       .     .    .      .     .    .          data->bin_id[i] = 0;
 19,341      0    0  10,745     0    0      0     0    0      } else if (data->bin_id[i] >= data->nbins) {
      .      .    .       .     .    .      .     .    .          data->bin_id[i] = data->nbins - 1;
      .      .    .       .     .    .      .     .    .      }
 12,894      2    1   8,596     0    0  2,149     0    0      t1 = (lb + (bin_id    ) * data->dbin);
 17,192    483    1   8,596     0    0  2,149     0    0      t2 = (lb + (bin_id + 1) * data->dbin);
 30,086    255    1  17,192     0    0  2,149     0    0      data->Tdef[i] = (data->logTs[i] - t1)/(t2 - t1);
 15,043      0    0   8,596     0    0  2,149     0    0      data->dT[i] = (t2 - t1);
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
 12,894    245    1   6,447     0    0  2,149     0    0      bin_id = data->bin_id[i];
 12,894      0    0   6,447   520    0      0     0    0      data->gammaH2_2[i] = data->g_gammaH2_2[bin_id] +
 49,427    522    1  23,639     1    0  2,149     0    0          data->Tdef[i] * (data->g_gammaH2_2[bin_id+1] - data->g_gammaH2_2[bin_id]);
      .      .    .       .     .    .      .     .    .  
 12,894    630    1   6,447   520    0      0     0    0      data->dgammaH2_2_dT[i] = data->g_dgammaH2_2_dT[bin_id] +
 25,788    592    1  12,894     1    0      0     0    0          data->Tdef[i] * (data->g_dgammaH2_2_dT[bin_id+1] 
 23,639      0    0  10,745     0    0  2,149     0    0          - data->g_dgammaH2_2_dT[bin_id]);
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
 12,894    256    1   6,447     0    0  2,149     0    0      bin_id = data->bin_id[i];
 12,894      0    0   6,447   771    0      0     0    0      data->gammaH2_1[i] = data->g_gammaH2_1[bin_id] +
 49,427    740    2  23,639    10    0  2,149    75    0          data->Tdef[i] * (data->g_gammaH2_1[bin_id+1] - data->g_gammaH2_1[bin_id]);
      .      .    .       .     .    .      .     .    .  
 12,894      0    0   6,447   771    0      0     0    0      data->dgammaH2_1_dT[i] = data->g_dgammaH2_1_dT[bin_id] +
 25,788    578    1  12,894    10    0      0     0    0          data->Tdef[i] * (data->g_dgammaH2_1_dT[bin_id+1] 
 23,639    937    1  10,745     0    0  2,149     0    0          - data->g_dgammaH2_1_dT[bin_id]);
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .         
  4,298      0    0   4,298     0    0      0     0    0      }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  void ensure_electron_consistency(double *input, int nstrip, int nchem)
      .      .    .       .     .    .      .     .    .  {
-- line 1378 ----------------------------------------
-- line 2991 ----------------------------------------
      .      .    .       .     .    .      .     .    .  }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  int calculate_rhs_final_(realtype t, N_Vector y, N_Vector ydot, void *user_data)
 10,192  1,274    1       0     0    0  7,644     0    0  {
  2,548  1,274    1   1,274     0    0  1,274     0    0      final__data *data = (final__data* ) user_data;
      .      .    .       .     .    .      .     .    .      int i, j;
      .      .    .       .     .    .      .     .    .  
  1,274      0    0       0     0    0  1,274     0    0      int nchem = 10;
  1,274      0    0       0     0    0  1,274     0    0      int nstrip = 1;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      /* change N_Vector back to an array */
      .      .    .       .     .    .      .     .    .      double y_arr[ 10 ];
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370      0    0   5,096     0    0  1,274     0    0      y_arr[0] = NV_Ith_S(y , 0);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[0]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370      0    0   5,096     0    0  1,274     0    0      y_arr[1] = NV_Ith_S(y , 1);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[1]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370  1,274    1   5,096     0    0  1,274     0    0      y_arr[2] = NV_Ith_S(y , 2);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[2]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370      0    0   5,096     0    0  1,274     0    0      y_arr[3] = NV_Ith_S(y , 3);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[3]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370  1,274    1   5,096     0    0  1,274     0    0      y_arr[4] = NV_Ith_S(y , 4);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[4]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370      0    0   5,096     0    0  1,274     0    0      y_arr[5] = NV_Ith_S(y , 5);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[5]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370      0    0   5,096     0    0  1,274     0    0      y_arr[6] = NV_Ith_S(y , 6);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[6]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370    937    1   5,096     0    0  1,274     0    0      y_arr[7] = NV_Ith_S(y , 7);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[7]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370      0    0   5,096     0    0  1,274     0    0      y_arr[8] = NV_Ith_S(y , 8);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[8]);
      .      .    .       .     .    .      .     .    .      /* the variable is ALREADY scaled in "calculate temperature" */
  6,370      0    0   5,096     0    0  1,274     0    0      y_arr[9] = NV_Ith_S(y , 9);
      .      .    .       .     .    .      .     .    .      // fprintf(stderr, "scale: %.3g \n", data->scale[9]);
      .      .    .       .     .    .      .     .    .  
  7,644    246    1   3,822     0    0  1,274     1    0      final__calculate_temperature(data, y_arr , nstrip, nchem );
  6,370      0    0   2,548     0    0  1,274     0    0      final__interpolate_rates(data, nstrip);
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      /* Now we set up some temporaries */
  3,822      0    0   1,274     0    0  1,274     5    0      double *k01 = data->rs_k01;
  3,822  1,274    1   1,274     0    0  1,274     0    0      double *k02 = data->rs_k02;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k03 = data->rs_k03;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k04 = data->rs_k04;
  3,822  1,274    1   1,274     0    0  1,274     0    0      double *k05 = data->rs_k05;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k06 = data->rs_k06;
  3,822      0    0   1,274     0    0  1,274     2    0      double *k07 = data->rs_k07;
  3,822  1,274    1   1,274     0    0  1,274     0    0      double *k08 = data->rs_k08;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k09 = data->rs_k09;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k10 = data->rs_k10;
  3,822  1,167    1   1,274     0    0  1,274     0    0      double *k11 = data->rs_k11;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k12 = data->rs_k12;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k13 = data->rs_k13;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k14 = data->rs_k14;
  3,822    857    1   1,274     0    0  1,274     0    0      double *k15 = data->rs_k15;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k16 = data->rs_k16;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k17 = data->rs_k17;
  3,822    857    1   1,274     0    0  1,274     0    0      double *k18 = data->rs_k18;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k19 = data->rs_k19;
  3,822      0    0   1,274     0    0  1,274     0    0      double *k21 = data->rs_k21;
  3,822  1,096    1   1,274     0    0  1,274     0    0      double *k22 = data->rs_k22;
  3,822      0    0   1,274     0    0  1,274     0    0      double *brem_brem = data->cs_brem_brem;
  3,822      0    0   1,274     0    0  1,274     0    0      double *ceHeI_ceHeI = data->cs_ceHeI_ceHeI;
  3,822      2    1   1,274     0    0  1,274     0    0      double *ceHeII_ceHeII = data->cs_ceHeII_ceHeII;
  3,822      0    0   1,274     0    0  1,274     0    0      double *ceHI_ceHI = data->cs_ceHI_ceHI;
  3,822      0    0   1,274     0    0  1,274     0    0      double *ciHeI_ciHeI = data->cs_ciHeI_ciHeI;
  3,822    483    1   1,274     0    0  1,274     0    0      double *ciHeII_ciHeII = data->cs_ciHeII_ciHeII;
  3,822      0    0   1,274     0    0  1,274     0    0      double *ciHeIS_ciHeIS = data->cs_ciHeIS_ciHeIS;
  3,822      0    0   1,274     0    0  1,274     0    0      double *ciHI_ciHI = data->cs_ciHI_ciHI;
  3,822      0    0   1,274     0    0  1,274     0    0      double *compton_comp_ = data->cs_compton_comp_;
  3,822    255    1   1,274     0    0  1,274     0    0      double *gammah_gammah = data->cs_gammah_gammah;
  3,822      0    0   1,274     0    0  1,274     0    0      double *gloverabel08_gael = data->cs_gloverabel08_gael;
  3,822      0    0   1,274     0    0  1,274     1    0      double *gloverabel08_gaH2 = data->cs_gloverabel08_gaH2;
  3,822    245    1   1,274     0    0  1,274     0    0      double *gloverabel08_gaHe = data->cs_gloverabel08_gaHe;
  3,822      0    0   1,274     0    0  1,274     0    0      double *gloverabel08_gaHI = data->cs_gloverabel08_gaHI;
  3,822      0    0   1,274     0    0  1,274     0    0      double *gloverabel08_gaHp = data->cs_gloverabel08_gaHp;
  3,822    522    1   1,274     0    0  1,274     0    0      double *gloverabel08_gphdl = data->cs_gloverabel08_gphdl;
  3,822      0    0   1,274     0    0  1,274     0    0      double *gloverabel08_gpldl = data->cs_gloverabel08_gpldl;
  3,822      0    0   1,274     0    0  1,274     0    0      double *gloverabel08_h2lte = data->cs_gloverabel08_h2lte;
  3,822    630    1   1,274     0    0  1,274     0    0      double *h2formation_h2mcool = data->cs_h2formation_h2mcool;
  3,822      0    0   1,274     0    0  1,274     0    0      double *h2formation_h2mheat = data->cs_h2formation_h2mheat;
  3,822      0    0   1,274     0    0  1,274     0    0      double *h2formation_ncrd1 = data->cs_h2formation_ncrd1;
  3,822    592    1   1,274     0    0  1,274     0    0      double *h2formation_ncrd2 = data->cs_h2formation_ncrd2;
  3,822      0    0   1,274     0    0  1,274     0    0      double *h2formation_ncrn = data->cs_h2formation_ncrn;
  3,822      0    0   1,274     0    0  1,274     0    0      double *reHeII1_reHeII1 = data->cs_reHeII1_reHeII1;
  3,822      0    0   1,274     0    0  1,274     0    0      double *reHeII2_reHeII2 = data->cs_reHeII2_reHeII2;
  3,822    256    1   1,274     0    0  1,274     0    0      double *reHeIII_reHeIII = data->cs_reHeIII_reHeIII;
  3,822      0    0   1,274     0    0  1,274     0    0      double *reHII_reHII = data->cs_reHII_reHII;
      .      .    .       .     .    .      .     .    .      double H2_1;
      .      .    .       .     .    .      .     .    .      double H2_2;
      .      .    .       .     .    .      .     .    .      double H_1;
      .      .    .       .     .    .      .     .    .      double H_2;
      .      .    .       .     .    .      .     .    .      double H_m0;
      .      .    .       .     .    .      .     .    .      double He_1;
      .      .    .       .     .    .      .     .    .      double He_2;
      .      .    .       .     .    .      .     .    .      double He_3;
      .      .    .       .     .    .      .     .    .      double de;
      .      .    .       .     .    .      .     .    .      double ge;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      double z;
      .      .    .       .     .    .      .     .    .      double T;
      .      .    .       .     .    .      .     .    .  
  2,548      0    0       0     0    0  1,274     0    0      double mh = 1.67e-24;
      .      .    .       .     .    .      .     .    .      double mdensity;
      .      .    .       .     .    .      .     .    .      
  1,274    187    1       0     0    0  1,274     0    0      i = 0;
  7,644      0    0   3,822     0    0  1,274     0    0      T = data->Ts[i];
  3,822      0    0   2,548     0    0  1,274     0    0      z = data->current_z;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      double scale, inv_scale;
  1,274      0    0       0     0    0  1,274     0    0      int jj =0;
  7,644    553    1   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  7,644    578    1   6,370     0    0  1,274     0    0      H2_1 = NV_Ith_S( y,0 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0      mdensity += H2_1 * 2.01588;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644    937    1   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918      0    0   6,370     0    0  1,274     3    0      H2_2 = NV_Ith_S( y,1 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644    194    1   3,822     0    0  1,274     0    0      mdensity += H2_2 * 2.01588;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644    344    1   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918      0    0   6,370     0    0  1,274     0    0      H_1 = NV_Ith_S( y,2 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644    357    1   3,822     0    0  1,274     0    0      mdensity += H_1 * 1.00794;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918    217    1   6,370     0    0  1,274     0    0      H_2 = NV_Ith_S( y,3 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644    395    1   3,822     0    0  1,274     0    0      mdensity += H_2 * 1.00794;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918    732    1   6,370     0    0  1,274     0    0      H_m0 = NV_Ith_S( y,4 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644  1,273    1   3,822     0    0  1,274     0    0      mdensity += H_m0 * 1.00794;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918  1,274    1   6,370     0    0  1,274     0    0      He_1 = NV_Ith_S( y,5 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644    395    1   3,822     0    0  1,274     0    0      mdensity += He_1 * 4.002602;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918    733    1   6,370     0    0  1,274     0    0      He_2 = NV_Ith_S( y,6 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0      mdensity += He_2 * 4.002602;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644    733    1   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918      0    0   6,370     0    0  1,274     0    0      He_3 = NV_Ith_S( y,7 )*scale;
  1,274    395    1   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
  7,644      0    0   3,822     0    0  1,274     0    0      mdensity += He_3 * 4.002602;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644    732    1   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918      0    0   6,370     0    0  1,274     0    0      de = NV_Ith_S( y,8 )*scale;
  1,274      0    0   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
  7,644    395    1   3,822     0    0  1,274     0    0      scale = data->scale[jj];
  8,918      0    0   6,370     0    0  1,274     6    0      ge = NV_Ith_S( y,9 )*scale;
  1,274    395    1   1,274     0    0      0     0    0      jj++;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
  3,822      0    0   2,548     0    0  1,274     0    0      mdensity *= mh;
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: H2_1
      .      .    .       .     .    .      .     .    .      //
119,756  2,617    9  63,700   236    0 14,014     0    0      NV_Ith_S(ydot, 0) = k08[i]*H_1*H_m0 + k10[i]*H2_2*H_1 - k11[i]*H2_1*H_2 - k12[i]*H2_1*de - k13[i]*H2_1*H_1 + k19[i]*H2_2*H_m0 + k21[i]*H2_1*pow(H_1, 2) + k22[i]*pow(H_1, 3);
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[0];
 11,466     59    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 0) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "H2_1: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 0));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: H2_2
      .      .    .       .     .    .      .     .    .      //
 75,166  1,081    5  42,042     0    0  1,274     0    0      NV_Ith_S(ydot, 1) = k09[i]*H_1*H_2 - k10[i]*H2_2*H_1 + k11[i]*H2_1*H_2 + k17[i]*H_2*H_m0 - k18[i]*H2_2*de - k19[i]*H2_2*H_m0;
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[1];
 14,014    593    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 1) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "H2_2: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 1));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: H_1
      .      .    .       .     .    .      .     .    .      //
228,046 17,039   15 115,934     0    0 14,014     0    0      NV_Ith_S(ydot, 2) = -k01[i]*H_1*de + k02[i]*H_2*de - k07[i]*H_1*de - k08[i]*H_1*H_m0 - k09[i]*H_1*H_2 - k10[i]*H2_2*H_1 + k11[i]*H2_1*H_2 + 2*k12[i]*H2_1*de + 2*k13[i]*H2_1*H_1 + k14[i]*H_m0*de + k15[i]*H_1*H_m0 + 2*k16[i]*H_2*H_m0 + 2*k18[i]*H2_2*de + k19[i]*H2_2*H_m0 - 2*k21[i]*H2_1*pow(H_1, 2) - 2*k22[i]*pow(H_1, 3);
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[2];
 14,014  1,274    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 2) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "H_1: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 2));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: H_2
      .      .    .       .     .    .      .     .    .      //
 86,632  5,253    6  48,412     0    0  1,274     0    0      NV_Ith_S(ydot, 3) = k01[i]*H_1*de - k02[i]*H_2*de - k09[i]*H_1*H_2 + k10[i]*H2_2*H_1 - k11[i]*H2_1*H_2 - k16[i]*H_2*H_m0 - k17[i]*H_2*H_m0;
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[3];
 14,014    483    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 3) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "H_2: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 3));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: H_m0
      .      .    .       .     .    .      .     .    .      //
 85,358  2,500    6  48,412     0    0  1,274   137    0      NV_Ith_S(ydot, 4) = k07[i]*H_1*de - k08[i]*H_1*H_m0 - k14[i]*H_m0*de - k15[i]*H_1*H_m0 - k16[i]*H_2*H_m0 - k17[i]*H_2*H_m0 - k19[i]*H2_2*H_m0;
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548    18    0  1,274     0    0      inv_scale = data->inv_scale[4];
 14,014    187    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 4) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "H_m0: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 4));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: He_1
      .      .    .       .     .    .      .     .    .      //
 31,850  1,131    2  17,836     0    0  1,274     0    0      NV_Ith_S(ydot, 5) = -k03[i]*He_1*de + k04[i]*He_2*de;
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[5];
 14,014    937    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 5) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "He_1: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 5));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: He_2
      .      .    .       .     .    .      .     .    .      //
 52,234    895    3  29,302     0    0  1,274     0    0      NV_Ith_S(ydot, 6) = k03[i]*He_1*de - k04[i]*He_2*de - k05[i]*He_2*de + k06[i]*He_3*de;
      .      .    .       .     .    .      .     .    .   
  3,822    217    1   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[6];
 14,014      0    0  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 6) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "He_2: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 6));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: He_3
      .      .    .       .     .    .      .     .    .      //
 28,028  1,127    2  16,562     0    0  1,274     0    0      NV_Ith_S(ydot, 7) = k05[i]*He_2*de - k06[i]*He_3*de;
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[7];
 14,014  1,273    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 7) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "He_3: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 7));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: de
      .      .    .       .     .    .      .     .    .      //
146,510  5,655   10  80,262     0    0  1,274     0    0      NV_Ith_S(ydot, 8) = k01[i]*H_1*de - k02[i]*H_2*de + k03[i]*He_1*de - k04[i]*He_2*de + k05[i]*He_2*de - k06[i]*He_3*de - k07[i]*H_1*de + k08[i]*H_1*H_m0 + k14[i]*H_m0*de + k15[i]*H_1*H_m0 + k17[i]*H_2*H_m0 - k18[i]*H2_2*de;
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[8];
 14,014    368    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 8) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "de: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 8));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //
      .      .    .       .     .    .      .     .    .      // Species: ge
      .      .    .       .     .    .      .     .    .      //
420,420 21,693   29 197,470     0    0 39,494     0    0      NV_Ith_S(ydot, 9) = (-H2_1*gloverabel08_h2lte[i]/(gloverabel08_h2lte[i]/(H2_1*gloverabel08_gaH2[i] + H_1*gloverabel08_gaHI[i] + H_2*gloverabel08_gaHp[i] + He_1*gloverabel08_gaHe[i] + de*gloverabel08_gael[i]) + 1.0) - H_1*ceHI_ceHI[i]*de - H_1*ciHI_ciHI[i]*de - H_2*de*reHII_reHII[i] - He_1*ciHeI_ciHeI[i]*de - He_2*ceHeII_ceHeII[i]*de - He_2*ceHeI_ceHeI[i]*pow(de, 2) - He_2*ciHeII_ciHeII[i]*de - He_2*ciHeIS_ciHeIS[i]*pow(de, 2) - He_2*de*reHeII1_reHeII1[i] - He_2*de*reHeII2_reHeII2[i] - He_3*de*reHeIII_reHeIII[i] - brem_brem[i]*de*(H_2 + He_2 + 4.0*He_3) - compton_comp_[i]*de*pow(z + 1.0, 4)*(T - 2.73*z - 2.73) + 0.5*1.0/(h2formation_ncrn[i]/(H2_1*h2formation_ncrd2[i] + H_1*h2formation_ncrd1[i]) + 1.0)*(-H2_1*H_1*h2formation_h2mcool[i] + pow(H_1, 3)*h2formation_h2mheat[i]))*fmin(1.00000000000000, (1.0 - exp(-fmax(1.00000000000000e-5, mdensity)))/fmax(1.00000000000000e-5, mdensity));
      .      .    .       .     .    .      .     .    .   
  3,822      0    0   2,548     0    0  1,274     0    0      inv_scale = data->inv_scale[9];
 14,014  1,274    1  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 9) *= inv_scale;
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .      
 14,014      0    0  10,192     0    0  1,274     0    0      NV_Ith_S(ydot, 9) /= mdensity;
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ge: %0.5g\n", scale);
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "ydot = %0.5g \n", NV_Ith_S(ydot, 9));
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      //fprintf(stderr, "----------------\n");
      .      .    .       .     .    .      .     .    .      
  1,274  1,167    1       0     0    0      0     0    0      return 0;
  5,096      0    0   3,822    11    0      0     0    0      }
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  
      .      .    .       .     .    .      .     .    .  int final__solve_chemistry_dt( dengo_field_data *field_data, 
      .      .    .       .     .    .      .     .    .  final__data *data, double dt ){
      .      .    .       .     .    .      .     .    .      
      .      .    .       .     .    .      .     .    .      int i, j;
-- line 3347 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /build/eglibc-ripdx6/eglibc-2.19/elf/../sysdeps/generic/dl-hash.h
  /build/eglibc-ripdx6/eglibc-2.19/elf/../sysdeps/x86_64/dl-machine.h
  /build/eglibc-ripdx6/eglibc-2.19/string/../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S
  /build/eglibc-ripdx6/eglibc-2.19/string/../sysdeps/x86_64/memset.S
  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/wordsize-64/math_private.h
  /build/eglibc-ripdx6/eglibc-2.19/elf/dl-addr.c
  /build/eglibc-ripdx6/eglibc-2.19/malloc/malloc.c
  /build/eglibc-ripdx6/eglibc-2.19/math/w_pow.c
  /build/eglibc-ripdx6/eglibc-2.19/elf/dl-lookup.c
  /build/eglibc-ripdx6/eglibc-2.19/elf/do-rel.h
  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/i386/fpu/fenv_private.h
  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/e_exp.c
  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/e_pow.c
  /build/eglibc-ripdx6/eglibc-2.19/math/../sysdeps/ieee754/dbl-64/e_log.c
  /build/eglibc-ripdx6/eglibc-2.19/string/../sysdeps/x86_64/multiarch/../strcmp.S

--------------------------------------------------------------------------------
Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
17   45    8 24    6    0 13    8    0  percentage of events annotated

