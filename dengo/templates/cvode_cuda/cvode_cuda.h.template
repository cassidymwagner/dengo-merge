#include "hdf5.h"
#include "hdf5_hl.h"
#include <stdio.h>
#include <cvode/cvode.h>                  /* prototypes for CVODE fcts., consts.          */
#include <nvector/nvector_cuda.h>         /* access to cuda N_Vector                      */
#include <sunmatrix/sunmatrix_cusparse.h>             /* access to cusparse SUNMatrix                  */
#include <sunlinsol/sunlinsol_cusolversp_batchqr.h>   /* acess to cuSolverSp batch QR SUNLinearSolver */
#include <sundials/sundials_types.h>     /* defs. of realtype, int              */

#define ZERO    RCONST(0.0)
#define kb      RCONST(1.3806504e-16)
#define mh      RCONST(1.67e-24)
#define gamma   RCONST(5.0/3.0)
#define _gamma_m1 RCONST(1.0/ (gamma-1.0) )
#define nchem 10

#define BATCHSIZE 2048
#define BLOCKSIZE 512
#define GRIDSIZE (BATCHSIZE/BLOCKSIZE)

#define T0 RCONST(0.0)
#define T1 RCONST(1e10)
#define TMULT RCONST(10.0)
#define NOUT 12

typedef struct code_units
{
    int comoving_coordinates;
    double density_units;
    double length_units;
    double time_units;
    double velocity_units;
    double a_units;
    double a_value;

} code_units;

// define our datatype
typedef struct
{
    double nbins;
    double dbin;
    double idbin;
    double lb;
    double ub;

    double current_z;
    double *Ts;
    double *logTs;
    double *Tdef;
    double *dTs_ge;
    double *Tge;

    // cooling & chemical tables
    {%- for name, rate in network.reactions | dictsort %}
    double *r_{{name}};
    double *rs_{{name}};
    double *drs_{{name}};
    {%- endfor %}

    {%- for name, rate in network.cooling_actions | dictsort %}
    {%- for name2 in rate.tables | sort %}
    double *c_{{name}}_{{name2}};
    double *cs_{{name}}_{{name2}};
    double *dcs_{{name}}_{{name2}};
    {%- endfor %}
    {%- endfor %}

    // for now, we ignore the temperature dependent Gamma
    /*
       {%- for sp in network.interpolate_gamma_species_name | sort %}
       double *g_gamma{{sp.name}};
       double *g_dgamma{{sp.name}}_dT;
       double *gamma{{sp.name}};
       double *dgamma_dT{{sp.name}};
       double *_gamma{{sp.name}}_dT;
       {%- endfor %}
     */

    {%- if "cie_cooling" in network.cooling_actions %}
    double *cie_optical_depth_approx;
    {%- endif %}
    {%- if "gloverabel08" in network.cooling_actions %}
    double *h2_optical_depth_approx;
    {%- endif %}


} {{solver_name}}_data;

typedef struct dengo_field_data
{
    unsigned long int nstrip;
    unsigned long int ncells;
    double reltol;
    double floor_value;

    double *density;
    {%- for species in network.required_species | sort %}
    double *{{species.name}}_density;
    {%- endfor %}

    double *CoolingTime;
    double *MolecularWeight;
    double *temperature;
    double *Gamma;

    int *grid_start;
    int *grid_end;
    int *grid_dimension;

    const char *dengo_data_file;
    code_units *units;
} dengo_field_data;


// read rate data
{{solver_name}}_data {{solver_name}}_setup_data(int *NumberOfFields, char ***FieldNames);

void {{solver_name}}_read_rate_tables({{solver_name}}_data *data);

void {{solver_name}}_read_cooling_tables({{solver_name}}_data *data);


// cuda kernels
__global__ void linear_interpolation_kernel({{solver_name}}_data data);

__global__ static void rhs_kernel(double y, double *ydata, double *ydotdata, {{solver_name}}_data data);


__global__ void temperature_kernel(double* ydata, {{solver_name}}_data data);

__global__ static void jacobian_kernel(realtype *ydata, realtype *Jdata, {{solver_name}}_data data);


// Function Called by the solver
static int calculate_rhs_{{solver_name}}(realtype t, N_Vector y, N_Vector ydot, void *user_data);
static int calculate_jacobian_{{solver_name}}(realtype t, N_Vector y, N_Vector fy, SUNMatrix J, void *user_data, N_Vector tmp1, N_Vector tmp2, N_Vector tmp3);
static int calculate_sparse_jacobian_{{solver_name}}(realtype t, N_Vector y, N_Vector fy, SUNMatrix J,
        void *user_data, N_Vector tmp1, N_Vector tmp2, N_Vector tmp3);
static int blockJacInit(SUNMatrix J);
static int JacInit(SUNMatrix J);
static int blockSparseJacInit(SUNMatrix J);



// test functions

void test_rhs_function({{solver_name}}_data data);
void test_jacobian_function({{solver_name}}_data data);
int grid_performance();
int test_scaling_dims();
int run_dengo_struct(double density, double temperature, double h2fraction, double efraction, unsigned long dims);


// cvode helper function
static int check_retval(void *returnvalue, const char *funcname, int opt);
static void PrintFinalStats(void *cvode_mem, SUNLinearSolver LS);

// dengo run solver
int run_solver(int argc, char *argv[]);
void *setup_cvode_cuda_solver(CVRhsFn f, CVLsJacFn Jac, int NEQ, {{solver_name}}_data *data, SUNLinearSolver LS, SUNMatrix A, N_Vector y, double reltol, N_Vector abstol, cusparseHandle_t *cusp_handle, cusolverSpHandle_t *cusol_handle);
int run_dengo_solver(double density, double temperature, double h2fraction, double efraction, unsigned long dims);

int dengo_evolve_{{solver_name}} (double dtf, double &dt, double z, double *input,
        double *rtol, double *atol, unsigned long dims, {{solver_name}}_data *data, double *temp_array );
void initialize_long_ydata(double *ydata, unsigned long NSYSTEM, double density, double temperature, double h2fraction, double efraction);
int run_dengo_solver(double density, double temperature, double h2fraction, double efraction, unsigned long dims);


void launchInterpolationKernel({{solver_name}}_data*);
void launchTemperatureKernel({{solver_name}}_data*);
void launchRhsKernel({{solver_name}}_data*);
void launchJacobianKernel({{solver_name}}_data *data);
