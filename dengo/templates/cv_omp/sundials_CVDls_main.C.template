#include "{{solver_name}}_solver.h"

int solve_chemistry(int argc, char **argv);
int solve_chemistry_enzo(int argc, char **argv);

int main(int argc, char **argv) {
    if (argc > 1){
       {{solver_name}}_main(argc, argv);
       return 0;
    }
    // solve_chemistry(argc, argv);
    // solve_chemistry_enzo(argc, argv);
}

/*
// Sample on how to use dengo with primordial chemistry
// with {{solver_name}}_solve_chemistry
int solve_chemistry(int argc, char **argv) {
    dengo_field_data *field_data = (dengo_field_data *) malloc(sizeof(dengo_field_data));
    int N = 64*64;
    field_data->ncells = N; 
    double density = 1.0e8; // in cm^-3
    double T = 1000.0; // in K
    double mH, k, tiny;

    mH = 1.67e-24;
    k  = 1.380e-16;
    tiny = 1.0e-20; 
    density *= mH;
    double G = 6.67259e-8;
    code_units *units = (code_units *) malloc(sizeof(code_units));
    units->density_units = 1.0;
    units->length_units = 1.0;
    units->time_units = 1.0;
    units->velocity_units = 1.0;
    {%- for species in network.required_species | sort %}
    double *{{species.name}}_density = (double*) malloc(N * sizeof(double));
    {%- endfor %}
    double *cooling_time = (double *) malloc( N * sizeof(double) );
    double *gamma = (double * ) malloc( N * sizeof(double) );
    double *temperature = (double *) malloc( N * sizeof(double) );
    double *mean_molecular_weight = (double *) malloc( N * sizeof(double) );

    double *reltol = (double*) malloc(sizeof(double));
    double *abstol = (double*) malloc(sizeof(double)* N * {{network.required_species | length }});
    reltol[0] = 1.0e-5;

    for ( int i = 0; i < N; i++){
        {%- for species in network.required_species %}
        {%- if species.name not in ["H2_1", "He_1", "H_1", "de", "H_2", "ge"] %}
        {{species.name}}_density[i] = tiny*density;
        {%- endif %}
        {%- endfor %}
        H2_1_density[i] = 1.0e-5 * density;
        H_1_density[i]  = 0.76   * density;
        He_1_density[i] = 0.24   * density;
	de_density[i]    = 1.0e-5 * density;
	H_2_density[i]   = 1.0e-5 * density;

	// ge ~ nkT / (gamma - 1)/ rho; gamaa ~ 5/3
        ge_density[i]   = 3.0/2.0 * k * T / mH;
	//density[i] = (0.76+0.24+1.0e-5+1.0e-5)*density;
    }

    for ( int i = 0; i < N * {{network.required_species| length}}; i++ ){
    	abstol[i] = tiny * reltol[0];
    }
    
    {%- for species in network.required_species %}
    field_data->{{species.name}}_density = {{species.name}}_density;
    {%- endfor %}
    //field_data->density         = density;
    field_data->CoolingTime     = cooling_time;
    field_data->Gamma           = gamma;
    field_data->temperature     = temperature;
    field_data->MolecularWeight = mean_molecular_weight;

    const char *fileloc = "{{network._dengo_install_path}}/{{solver_name}}_tables.h5";
    field_data->dengo_data_file = fileloc;
    field_data->reltol = reltol[0];

    double dt = 1.0 / sqrt(G * density) ;
    fprintf(stderr, "MAX_NCELLS = %d \n", MAX_NCELLS);
    {{solver_name}}_solve_chemistry( units, field_data, dt );
    dengo_estimate_cooling_time( units, field_data);
 
    {%- for species in network.required_species | sort %}
    {%- if species.name != "ge" %}
    fprintf(stderr, "{{species.name}} = %0.5g\n", field_data->{{species.name}}_density[0] / mH );
    {%- else %}
    fprintf(stderr, "{{species.name}} = %0.5g\n", field_data->{{species.name}}_density[0] );
    {%- endif %}
    {%- endfor %}
    fprintf(stderr, "CoolingTime = %0.5g\n", field_data->CoolingTime[0]);
    
    // at the low density limit,
    // Hm is important catalyst for H2 formation
    // we compare the relative difference of of the solution
    // between different cells
    // since we starts with the same initial conditions,
    // it should give the same result, at the worst, 
    // results within the relative tolerance level
    
    unsigned long d;
    // lets just compare everything!!!!!!
    double ref0, frac;
    {%- for species in network.required_species %}
    double {{species.name}};
    ref0 = field_data->{{species.name}}_density[0];
    for (d = 1; d < N; d++){
	{{species.name}} = field_data->{{species.name}}_density[d];
	frac = fabs({{species.name}}-ref0)/ref0;
	if (frac > reltol[0]){
	    fprintf(stderr, "{{species.name}}[%lu] = %0.5g; diff = %0.5g\n", d, {{species.name}}, frac);
	}
    }
    {%- endfor %}

    double ct;
    ref0 = field_data->CoolingTime[0];
    for (d = 1; d < N; d++){
	ct = field_data->CoolingTime[d];
	frac = fabs(ct-ref0)/ref0;
	if (frac > reltol[0]){
	    fprintf(stderr, "CoolingTime[%lu] = %0.5g; diff = %0.5g\n",d,ct, frac);
	}
    }

    free(field_data);
    {%- for species in network.required_species | sort %}
    free({{species.name}}_density);
    {%- endfor %}
    free(cooling_time);
    free(gamma);
    free(temperature);
    free(mean_molecular_weight);
    free(abstol);
    free(reltol);
}


// Sample on how to use dengo with primordial chemistry
// with {{solver_name}}_solve_chemistry_enzo
int solve_chemistry_enzo(int argc, char **argv) {
    dengo_field_data *field_data = (dengo_field_data *) malloc(sizeof(dengo_field_data));
    int N = 16*16*16;
    field_data->ncells = N; 
    double density = 1.0e8; // in cm^-3
    double T = 1000.0; // in K
    double mH, k, tiny;

    mH = 1.67e-24;
    k  = 1.380e-16;
    tiny = 1.0e-20; 
    density *= mH;
    double G = 6.67259e-8;
    code_units *units = (code_units *) malloc(sizeof(code_units));
    units->density_units = 1.0;
    units->length_units = 1.0;
    units->time_units = 1.0;
    units->velocity_units = 1.0;
    {%- for species in network.required_species | sort %}
    double *{{species.name}}_density = (double*) malloc(N * sizeof(double));
    {%- endfor %}
    double *cooling_time = (double *) malloc( N * sizeof(double) );
    double *gamma = (double * ) malloc( N * sizeof(double) );
    double *temperature = (double *) malloc( N * sizeof(double) );
    double *mean_molecular_weight = (double *) malloc( N * sizeof(double) );
    double *density_arr = (double *) malloc( N * sizeof(double) );

    double *reltol = (double*) malloc(sizeof(double));
    double *abstol = (double*) malloc(sizeof(double)* N * {{network.required_species | length }});
    reltol[0] = 1.0e-5;

    for ( int i = 0; i < N; i++){
        {%- for species in network.required_species %}
        {%- if species.name not in ["H2_1", "He_1", "H_1", "de", "H_2", "ge"] %}
        {{species.name}}_density[i] = tiny*density;
        {%- endif %}
        {%- endfor %}
        H2_1_density[i] = 1.0e-5 * density;
        H_1_density[i]  = 0.76   * density;
        He_1_density[i] = 0.24   * density;
	de_density[i]    = 1.0e-5 * density;
	H_2_density[i]   = 1.0e-5 * density;

	// ge ~ nkT / (gamma - 1)/ rho; gamaa ~ 5/3
        ge_density[i]   = 3.0/2.0 * k * T / mH;
	density_arr[i] = (1+2.0*1e-5)*density;
    }

    for ( int i = 0; i < N * {{network.required_species| length}}; i++ ){
    	abstol[i] = tiny * reltol[0];
    }
    
    {%- for species in network.required_species %}
    field_data->{{species.name}}_density = {{species.name}}_density;
    {%- endfor %}

    field_data->density         = density_arr;
    field_data->CoolingTime     = cooling_time;
    field_data->Gamma           = gamma;
    field_data->temperature     = temperature;
    field_data->MolecularWeight = mean_molecular_weight;

    int gstart[3];
    int gend[3];
    int gd[3];

    gstart[0] = 0;
    gstart[1] = 0;
    gstart[2] = 0;

    gend[0] = 15;
    gend[1] = 15;
    gend[2] = 15;

    gd[0] = 16;
    gd[1] = 16;
    gd[2] = 16;

    field_data->grid_start = &gstart[0];
    field_data->grid_end   = &gend[0];
    field_data->grid_dimension = &gd[0];


    const char *fileloc = "{{network._dengo_install_path}}/{{solver_name}}_tables.h5";
    field_data->dengo_data_file = fileloc;
    field_data->reltol = reltol[0];

    units->a_value = 1.0;
    units->a_units = 1.0;

    double dt = 1.0 / sqrt(G * density) ;
    fprintf(stderr, "MAX_NCELLS = %d \n", MAX_NCELLS);
    {{solver_name}}_solve_chemistry_enzo( units, field_data, dt );
    dengo_estimate_cooling_time_enzo( units, field_data);
 
    {%- for species in network.required_species | sort %}
    {%- if species.name != "ge" %}
    fprintf(stderr, "{{species.name}} = %0.5g\n", field_data->{{species.name}}_density[0] / mH );
    {%- else %}
    fprintf(stderr, "{{species.name}} = %0.5g\n", field_data->{{species.name}}_density[0] );
    {%- endif %}
    {%- endfor %}
    fprintf(stderr, "CoolingTime = %0.5g\n", field_data->CoolingTime[0]);

    unsigned long d;
    // lets just compare everything!!!!!!
    double ref0, frac;
    {%- for species in network.required_species %}
    double {{species.name}};
    ref0 = field_data->{{species.name}}_density[0];
    for (d = 1; d < N; d++){
	{{species.name}} = field_data->{{species.name}}_density[d];
	frac = fabs({{species.name}}-ref0)/ref0;
	if (frac > reltol[0]){
	    fprintf(stderr, "{{species.name}}[%lu] = %0.5g; diff = %0.5g\n", d, {{species.name}}, frac);
	}
    }
    {%- endfor %}

    double ct;
    ref0 = field_data->CoolingTime[0];
    for (d = 1; d < N; d++){
	ct = field_data->CoolingTime[d];
	frac = fabs(ct-ref0)/ref0;
	if (frac > reltol[0]){
	    fprintf(stderr, "CoolingTime[%lu] = %0.5g; diff = %0.5g\n",d,ct, frac);
	}
    }

    {%- if network.enforce_conservation %}
    double fH = 0.76;
    double fHe = 1- fH;
    double rho;
    double total_H;
    double total_He;
    double diff;
    for (d = 0; d <N; d++){
    	{%- for element in network.get_conserved_dict() %}
	total_{{element}} = 0.0;
	total_{{element}} = 0.0;
	{%- endfor %}
	rho = density_arr[d]*units->density_units;
    	{%- for species in network.ode_species %}
	{%- for element in species.elements %}
	total_{{element}} += field_data->{{species.name}}_density[d]/rho/f{{element}};
	{%- endfor %}
	{%- endfor %}

    	{%- for element in network.get_conserved_dict() %}
	diff = fabs(total_{{element}} - 1.0);
        if (diff > 1.0e-9){
	    fprintf(stderr, "total_{{element}} is  not conserved %0.5g\n", diff);
	}	
	{%- endfor %}
    }
    {%- endif %}

    free(field_data);
    {%- for species in network.required_species | sort %}
    free({{species.name}}_density);
    {%- endfor %}
    free(cooling_time);
    free(gamma);
    free(temperature);
    free(mean_molecular_weight);
    free(abstol);
    free(reltol);
}
*/
