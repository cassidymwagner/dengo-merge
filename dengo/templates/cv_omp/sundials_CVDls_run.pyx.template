cimport numpy as np
import numpy as np
import time
from libc.stdlib cimport malloc, free
from cpython cimport array

cdef extern from "alloca.h":
    void *alloca(int)

##############################################################################

cdef extern from "sundials/sundials_types.h":
    
    ctypedef double realtype
    ctypedef int booleantype
    
    enum: TRUE
    enum: FALSE

cdef extern from "sundials/sundials_nvector.h":

    cdef struct _generic_N_Vector_Ops
    ctypedef _generic_N_Vector_Ops *N_Vector_Ops
    
    cdef struct _generic_N_Vector 
    ctypedef _generic_N_Vector *N_Vector

    ctypedef N_Vector *N_Vector_S

    cdef struct _generic_N_Vector_Ops:
        N_Vector    (*nvclone)(N_Vector)
        N_Vector    (*nvcloneempty)(N_Vector)
        void        (*nvdestroy)(N_Vector)
        void        (*nvspace)(N_Vector, long *, long *)
        realtype*   (*nvgetarraypointer)(N_Vector)
        void        (*nvsetarraypointer)(realtype *, N_Vector)
        void        (*nvlinearsum)(realtype, N_Vector, realtype, N_Vector, N_Vector)
        void        (*nvconst)(realtype, N_Vector)
        void        (*nvprod)(N_Vector, N_Vector, N_Vector)
        void        (*nvdiv)(N_Vector, N_Vector, N_Vector)
        void        (*nvscale)(realtype, N_Vector, N_Vector)
        void        (*nvabs)(N_Vector, N_Vector)
        void        (*nvinv)(N_Vector, N_Vector)
        void        (*nvaddconst)(N_Vector, realtype, N_Vector)
        realtype    (*nvdotprod)(N_Vector, N_Vector)
        realtype    (*nvmaxnorm)(N_Vector)
        realtype    (*nvwrmsnorm)(N_Vector, N_Vector)
        realtype    (*nvwrmsnormmask)(N_Vector, N_Vector, N_Vector)
        realtype    (*nvmin)(N_Vector)
        realtype    (*nvwl2norm)(N_Vector, N_Vector)
        realtype    (*nvl1norm)(N_Vector)
        void        (*nvcompare)(realtype, N_Vector, N_Vector)
        booleantype (*nvinvtest)(N_Vector, N_Vector)
        booleantype (*nvconstrmask)(N_Vector, N_Vector, N_Vector)
        realtype    (*nvminquotient)(N_Vector, N_Vector)
    
    cdef struct _generic_N_Vector:
        void *content
        _generic_N_Vector_Ops *ops   

cdef extern from "sundials/sundials_direct.h":        
#    /*
#     * =================================================================
#     *                C O N S T A N T S
#     * =================================================================
#     */
#    
#    /*
#     *  SUNDIALS_DENSE: dense matrix
#     *  SUNDIALS_BAND:  banded matrix
#     */
#    
    enum: SUNDIALS_DENSE
    enum: SUNDIALS_BAND
#    
#    /*
#     * ==================================================================
#     * Type definitions
#     * ==================================================================
#     */
#    
#    /*
#     * -----------------------------------------------------------------
#     * Type : DlsMat
#     * -----------------------------------------------------------------
#     * The type DlsMat is defined to be a pointer to a structure
#     * with various sizes, a data field, and an array of pointers to
#     * the columns which defines a dense or band matrix for use in 
#     * direct linear solvers. The M and N fields indicates the number 
#     * of rows and columns, respectively. The data field is a one 
#     * dimensional array used for component storage. The cols field 
#     * stores the pointers in data for the beginning of each column.
#     * -----------------------------------------------------------------
#     * For DENSE matrices, the relevant fields in DlsMat are:
#     *    type  = SUNDIALS_DENSE
#     *    M     - number of rows
#     *    N     - number of columns
#     *    ldim  - leading dimension (ldim >= M)
#     *    data  - pointer to a contiguous block of realtype variables
#     *    ldata - length of the data array =ldim*N
#     *    cols  - array of pointers. cols[j] points to the first element 
#     *            of the j-th column of the matrix in the array data.
#     *
#     * The elements of a dense matrix are stored columnwise (i.e columns 
#     * are stored one on top of the other in memory). 
#     * If A is of type DlsMat, then the (i,j)th element of A (with 
#     * 0 <= i < M and 0 <= j < N) is given by (A->data)[j*n+i]. 
#     *
#     * The DENSE_COL and DENSE_ELEM macros below allow a user to access 
#     * efficiently individual matrix elements without writing out explicit 
#     * data structure references and without knowing too much about the 
#     * underlying element storage. The only storage assumption needed is 
#     * that elements are stored columnwise and that a pointer to the 
#     * jth column of elements can be obtained via the DENSE_COL macro.
#     * -----------------------------------------------------------------
#     * For BAND matrices, the relevant fields in DlsMat are:
#     *    type  = SUNDIALS_BAND
#     *    M     - number of rows
#     *    N     - number of columns
#     *    mu    - upper bandwidth, 0 <= mu <= min(M,N)
#     *    ml    - lower bandwidth, 0 <= ml <= min(M,N)
#     *    s_mu  - storage upper bandwidth, mu <= s_mu <= N-1.
#     *            The dgbtrf routine writes the LU factors into the storage 
#     *            for A. The upper triangular factor U, however, may have 
#     *            an upper bandwidth as big as MIN(N-1,mu+ml) because of 
#     *            partial pivoting. The s_mu field holds the upper 
#     *            bandwidth allocated for A.
#     *    ldim  - leading dimension (ldim >= s_mu)
#     *    data  - pointer to a contiguous block of realtype variables
#     *    ldata - length of the data array =ldim*(s_mu+ml+1)
#     *    cols  - array of pointers. cols[j] points to the first element 
#     *            of the j-th column of the matrix in the array data.
#     *
#     * The BAND_COL, BAND_COL_ELEM, and BAND_ELEM macros below allow a 
#     * user to access individual matrix elements without writing out 
#     * explicit data structure references and without knowing too much 
#     * about the underlying element storage. The only storage assumption 
#     * needed is that elements are stored columnwise and that a pointer 
#     * into the jth column of elements can be obtained via the BAND_COL 
#     * macro. The BAND_COL_ELEM macro selects an element from a column
#     * which has already been isolated via BAND_COL. The macro 
#     * BAND_COL_ELEM allows the user to avoid the translation 
#     * from the matrix location (i,j) to the index in the array returned 
#     * by BAND_COL at which the (i,j)th element is stored. 
#     * -----------------------------------------------------------------
#     */
#    
    cdef struct _DlsMat:
        int type
        long int M
        long int N
        long int ldim
        long int mu
        long int ml
        long int s_mu
        realtype *data
        long int ldata
        realtype **cols
        
    ctypedef _DlsMat *DlsMat
    
#    /*
#     * ==================================================================
#     * Data accessor macros
#     * ==================================================================
#     */
#    
#    /*
#     * -----------------------------------------------------------------
#     * DENSE_COL and DENSE_ELEM
#     * -----------------------------------------------------------------
#     *
#     * DENSE_COL(A,j) references the jth column of the M-by-N dense
#     * matrix A, 0 <= j < N. The type of the expression DENSE_COL(A,j) 
#     * is (realtype *). After the assignment in the usage above, col_j 
#     * may be treated as an array indexed from 0 to M-1. The (i,j)-th 
#     * element of A is thus referenced by col_j[i].
#     *
#     * DENSE_ELEM(A,i,j) references the (i,j)th element of the dense 
#     * M-by-N matrix A, 0 <= i < M ; 0 <= j < N.
#     *
#     * -----------------------------------------------------------------
#     */
#    
#    #define DENSE_COL(A,j) ((A->cols)[j])
    void DENSE_COL(DlsMat A, long int j)
#    #define DENSE_ELEM(A,i,j) ((A->cols)[j][i])
    void DENSE_ELEM(DlsMat A, long int i, long int j)    
#    
#    /*
#     * -----------------------------------------------------------------
#     * BAND_COL, BAND_COL_ELEM, and BAND_ELEM
#     * -----------------------------------------------------------------
#     *  
#     * BAND_COL(A,j) references the diagonal element of the jth column 
#     * of the N by N band matrix A, 0 <= j <= N-1. The type of the 
#     * expression BAND_COL(A,j) is realtype *. The pointer returned by 
#     * the call BAND_COL(A,j) can be treated as an array which is 
#     * indexed from -(A->mu) to (A->ml).
#     * 
#     * BAND_COL_ELEM references the (i,j)th entry of the band matrix A 
#     * when used in conjunction with BAND_COL. The index (i,j) should 
#     * satisfy j-(A->mu) <= i <= j+(A->ml).
#     *
#     * BAND_ELEM(A,i,j) references the (i,j)th element of the M-by-N 
#     * band matrix A, where 0 <= i,j <= N-1. The location (i,j) should 
#     * further satisfy j-(A->mu) <= i <= j+(A->ml). 
#     *
#     * -----------------------------------------------------------------
#     */
#     
#    #define BAND_COL(A,j) (((A->cols)[j])+(A->s_mu))
#    #define BAND_COL_ELEM(col_j,i,j) (col_j[(i)-(j)])
#    #define BAND_ELEM(A,i,j) ((A->cols)[j][(i)-(j)+(A->s_mu)])    
        
cdef extern from "sundials/sundials_iterative.h":
    #/*
    # * -----------------------------------------------------------------
    # * enum : types of preconditioning                                
    # * -----------------------------------------------------------------
    # * PREC_NONE  : The iterative linear solver should not use             
    # *              preconditioning.                                       
    # *                                                                
    # * PREC_LEFT  : The iterative linear solver uses preconditioning on    
    # *              the left only.                                         
    # *                                                                
    # * PREC_RIGHT : The iterative linear solver uses preconditioning on    
    # *              the right only.                                        
    # *                                                                
    # * PREC_BOTH  : The iterative linear solver uses preconditioning on    
    # *              both the left and the right.                           
    # * -----------------------------------------------------------------
    # */

    enum: PREC_NONE
    enum: PREC_LEFT
    enum: PREC_RIGHT
    enum: PREC_BOTH 
    
    #/*
    # * -----------------------------------------------------------------
    # * enum : types of Gram-Schmidt routines                          
    # * -----------------------------------------------------------------
    # * MODIFIED_GS  : The iterative solver uses the modified          
    # *                Gram-Schmidt routine ModifiedGS listed in this  
    # *                file.                                           
    # *                                                                
    # * CLASSICAL_GS : The iterative solver uses the classical         
    # *                Gram-Schmidt routine ClassicalGS listed in this 
    # *                file.                                           
    # * -----------------------------------------------------------------
    # */
    #
    enum: MODIFIED_GS
    enum: CLASSICAL_GS
    
    
cdef extern from "sundials/sundials_dense.h":
    #/*
    # * -----------------------------------------------------------------
    # * Functions: DenseGETRF and DenseGETRS
    # * -----------------------------------------------------------------
    # * DenseGETRF performs the LU factorization of the M by N dense
    # * matrix A. This is done using standard Gaussian elimination
    # * with partial (row) pivoting. Note that this applies only
    # * to matrices with M >= N and full column rank.
    # *
    # * A successful LU factorization leaves the matrix A and the
    # * pivot array p with the following information:
    # *
    # * (1) p[k] contains the row number of the pivot element chosen
    # *     at the beginning of elimination step k, k=0, 1, ..., N-1.
    # *
    # * (2) If the unique LU factorization of A is given by PA = LU,
    # *     where P is a permutation matrix, L is a lower trapezoidal
    # *     matrix with all 1's on the diagonal, and U is an upper
    # *     triangular matrix, then the upper triangular part of A
    # *     (including its diagonal) contains U and the strictly lower
    # *     trapezoidal part of A contains the multipliers, I-L.
    # *
    # * For square matrices (M=N), L is unit lower triangular.
    # *
    # * DenseGETRF returns 0 if successful. Otherwise it encountered
    # * a zero diagonal element during the factorization. In this case
    # * it returns the column index (numbered from one) at which
    # * it encountered the zero.
    # *
    # * DenseGETRS solves the N-dimensional system A x = b using
    # * the LU factorization in A and the pivot information in p
    # * computed in DenseGETRF. The solution x is returned in b. This
    # * routine cannot fail if the corresponding call to DenseGETRF
    # * did not fail.
    # * DenseGETRS does NOT check for a square matrix!
    # *
    # * -----------------------------------------------------------------
    # * DenseGETRF and DenseGETRS are simply wrappers around denseGETRF
    # * and denseGETRS, respectively, which perform all the work by
    # * directly accessing the data in the DlsMat A (i.e. the field cols)
    # * -----------------------------------------------------------------
    # */
    long int denseGETRF(realtype **a, long int m, long int n, long int *p)
    void denseGETRS(realtype **a, long int n, long int *p, realtype *b) 
        
    
    #/*
    # * -----------------------------------------------------------------
    # * Functions : DensePOTRF and DensePOTRS
    # * -----------------------------------------------------------------
    # * DensePOTRF computes the Cholesky factorization of a real symmetric
    # * positive definite matrix A.
    # * -----------------------------------------------------------------
    # * DensePOTRS solves a system of linear equations A*X = B with a 
    # * symmetric positive definite matrix A using the Cholesky factorization
    # * A = L*L**T computed by DensePOTRF.
    # *
    # * -----------------------------------------------------------------
    # * DensePOTRF and DensePOTRS are simply wrappers around densePOTRF
    # * and densePOTRS, respectively, which perform all the work by
    # * directly accessing the data in the DlsMat A (i.e. the field cols)
    # * -----------------------------------------------------------------
    # */
    #
    #SUNDIALS_EXPORT long int DensePOTRF(DlsMat A);
    #SUNDIALS_EXPORT void DensePOTRS(DlsMat A, realtype *b);
    
    long int densePOTRF(realtype **a, long int m)
    void densePOTRS(realtype **a, long int m, realtype *b)
    
    #/*
    # * -----------------------------------------------------------------
    # * Functions : DenseGEQRF and DenseORMQR
    # * -----------------------------------------------------------------
    # * DenseGEQRF computes a QR factorization of a real M-by-N matrix A:
    # * A = Q * R (with M>= N).
    # * 
    # * DenseGEQRF requires a temporary work vector wrk of length M.
    # * -----------------------------------------------------------------
    # * DenseORMQR computes the product w = Q * v where Q is a real 
    # * orthogonal matrix defined as the product of k elementary reflectors
    # *
    # *        Q = H(1) H(2) . . . H(k)
    # *
    # * as returned by DenseGEQRF. Q is an M-by-N matrix, v is a vector
    # * of length N and w is a vector of length M (with M>=N).
    # *
    # * DenseORMQR requires a temporary work vector wrk of length M.
    # *
    # * -----------------------------------------------------------------
    # * DenseGEQRF and DenseORMQR are simply wrappers around denseGEQRF
    # * and denseORMQR, respectively, which perform all the work by
    # * directly accessing the data in the DlsMat A (i.e. the field cols)
    # * -----------------------------------------------------------------
    # */
    #
    #SUNDIALS_EXPORT int DenseGEQRF(DlsMat A, realtype *beta, realtype *wrk);
    #SUNDIALS_EXPORT int DenseORMQR(DlsMat A, realtype *beta, realtype *vn, realtype *vm, 
    #			       realtype *wrk);
    #
    int denseGEQRF(realtype **a, long int m, long int n, realtype *beta, realtype *v)
    int denseORMQR(realtype **a, long int m, long int n, realtype *beta,
    			       realtype *v, realtype *w, realtype *wrk)
    #
    #/*
    # * -----------------------------------------------------------------
    # * Function : DenseCopy
    # * -----------------------------------------------------------------
    # * DenseCopy copies the contents of the M-by-N matrix A into the
    # * M-by-N matrix B.
    # * 
    # * DenseCopy is a wrapper around denseCopy which accesses the data
    # * in the DlsMat A and B (i.e. the fields cols)
    # * -----------------------------------------------------------------
    # */
    
    #SUNDIALS_EXPORT void DenseCopy(DlsMat A, DlsMat B);
    void denseCopy(realtype **a, realtype **b, long int m, long int n)
    
    #/*
    # * -----------------------------------------------------------------
    # * Function: DenseScale
    # * -----------------------------------------------------------------
    # * DenseScale scales the elements of the M-by-N matrix A by the
    # * constant c and stores the result back in A.
    # *
    # * DenseScale is a wrapper around denseScale which performs the actual
    # * scaling by accessing the data in the DlsMat A (i.e. the field
    # * cols).
    # * -----------------------------------------------------------------
    # */
    #
    #SUNDIALS_EXPORT void DenseScale(realtype c, DlsMat A);
    void denseScale(realtype c, realtype **a, long int m, long int n)
    
    
    #/*
    # * -----------------------------------------------------------------
    # * Function: denseAddIdentity
    # * -----------------------------------------------------------------
    # * denseAddIdentity adds the identity matrix to the n-by-n matrix
    # * stored in the realtype** arrays.
    # * -----------------------------------------------------------------
    # */
    #
    void denseAddIdentity(realtype **a, long int n)
    #
    #    


##############################################################################


# NSPECIES here is N in the .C.template file
DEF NSPECIES = {{network.required_species | length}}
DEF MAX_NCELLS=1

cdef extern from "{{solver_name}}_solver.h":
    cdef int _MAX_NCELLS  "MAX_NCELLS"
    cdef int _NSPECIES "NSPECIES"

    ctypedef struct dengo_field_data:
        unsigned long int nstrip;
        unsigned long int ncells;
        {%- for species in network.required_species | sort %}
        double *{{species.name}}_density;
        {% endfor %}
        double *density;
        double *CoolingTime;
        double *MolecularWeight;
        double *temperature;
        double *Gamma;
        const char *dengo_data_file;
    
    ctypedef struct code_units:
        int comoving_coordinates   
        double density_units
        double length_units
        double time_units
        double velocity_units
        double a_units
        double a_value


    ctypedef struct {{solver_name}}_data:
        double dbin
        double idbin
        double bounds[2]
        int nbins

        double d_zbin
        double id_zbin
        double z_bounds[2]
        int n_zbins

        double current_z
        double zdef
        double dz

        double Ts[MAX_NCELLS]
        double Tdef[MAX_NCELLS]
        double dT[MAX_NCELLS]
        double logTs[MAX_NCELLS]
        double dTs_{{ network.energy_term.name }}[MAX_NCELLS]
        {%- for name, rate in network.reactions | dictsort %}
        double r_{{name}}[{{ network.T | length }}]
        double rs_{{name}}[MAX_NCELLS]
        double drs_{{name}}[MAX_NCELLS]
        {%- endfor %}
        {%- for name, rate in network.cooling_actions | dictsort %}
        {%- for name2 in rate.tables | sort %}
        double c_{{name}}_{{name2}}[{{ network.T | length }}]
        double cs_{{name}}_{{name2}}[MAX_NCELLS]
        double dcs_{{name}}_{{name2}}[MAX_NCELLS]
        {%- endfor %}
        {% endfor %}
        int bin_id[MAX_NCELLS]
        int ncells
    

    double dengo_evolve_{{solver_name}} (double dtf, double &dt, double z,
                                         double *input, double *rtol,
                                         double *atol, int dims,
                                         {{solver_name}}_data *data, double *temp)
    int {{solver_name}}_solve_chemistry_dt( code_units *units, dengo_field_data *field_data, double dt)
    

def main_run_{{solver_name}}():
    t1 = time.time()
    #{{solver_name}}_main(0, NULL)
    t2 = time.time()
    print("Total elapsed time: %0.3e" % (t2-t1))

def run_{{solver_name}}(ics, double tf, int niter = 10000,
                        int intermediate = 1, z = -1.0, dtarr = -999999):
    assert(_MAX_NCELLS == MAX_NCELLS)
    assert(_NSPECIES == NSPECIES)
    {%- for s in network.required_species | sort %}
    cdef np.ndarray[np.float64_t, ndim=1] {{s.name}}_arr = ics["{{s.name}}"]
    if not {{s.name}}_arr.flags['C_CONTIGUOUS']:
        {{s.name}}_arr = np.ascontiguousarray( {{s.name}}_arr )
    cdef double[::1] {{s.name}}_memview = {{s.name}}_arr
    cdef np.ndarray[np.float64_t, ndim=2] {{s.name}}_int
    {%- endfor %}
    cdef np.ndarray[np.float64_t, ndim=1] CoolingTime;
    cdef np.ndarray[np.float64_t, ndim=1] Gamma;
    cdef np.ndarray[np.float64_t, ndim=1] Temperature;
    cdef np.ndarray[np.float64_t, ndim=1] MolecularWeight;

    cdef np.ndarray[np.float64_t, ndim=2] CoolingTime_int;
    cdef np.ndarray[np.float64_t, ndim=2] Gamma_int;
    cdef np.ndarray[np.float64_t, ndim=2] Temperature_int;
    cdef np.ndarray[np.float64_t, ndim=2] MolecularWeight_int;


    cdef np.ndarray[np.float64_t, ndim=1] result_int
    cdef np.ndarray[np.float64_t, ndim=2] temp_int
    cdef np.ndarray[np.float64_t, ndim=1] t_int
    cdef np.ndarray[np.float64_t, ndim=1] dt_int

    cdef int i, j, k, iter
    cdef int dims = {{network.energy_term.name}}_arr.shape[0]
    cdef int NTOT = NSPECIES * dims
    cdef double *input = <double *> alloca(NTOT * sizeof(double))
    cdef double *prev = <double *> alloca(NTOT * sizeof(double))
    

    cdef dengo_field_data *field_data = <dengo_field_data *> malloc(sizeof(dengo_field_data));
    cdef code_units       * units     = <code_units *> malloc(sizeof(code_units));
    
    units.density_units = 1.67e-24;
    units.length_units  = 1.0;
    units.time_units    = 1.0;
    units.velocity_units = 1.0;
    
    CoolingTime = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    Gamma       = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    Temperature = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    MolecularWeight = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    cdef double[::1] ctime_memview = CoolingTime
    cdef double[::1] gamma_memview = Gamma
    cdef double[::1] temp_memview  = Temperature
    cdef double[::1] mweight_memview = MolecularWeight
   
        
    {%- for species in network.required_species | sort %}
    field_data.{{species.name}}_density = &{{species.name}}_memview[0];
    {% endfor %}
    field_data.CoolingTime = &ctime_memview[0]
    field_data.Gamma       = &gamma_memview[0]
    field_data.temperature = &temp_memview[0]
    field_data.MolecularWeight = &mweight_memview[0]
    field_data.ncells  = dims;



    if intermediate == 1:
        # allocate memory for the intermediate results
        {%- for s in network.required_species | sort %}
        {{s.name}}_int = np.zeros((dims, niter), "float64")
        {%- endfor %}
        CoolingTime_int = np.zeros((dims, niter), "float64")
        Gamma_int       = np.zeros((dims, niter), "float64")
        Temperature_int = np.zeros((dims, niter), "float64")
        MolecularWeight_int = np.zeros((dims, niter), "float64")

        temp_int = np.zeros((dims, niter), "float64")
        result_int = np.zeros(niter, "float64")
        t_int = np.zeros(niter, "float64")
        dt_int = np.zeros(niter, "float64")

    j = 0
    for i in range(dims):
        {%- for s in network.required_species | sort %}
        input[j] = prev[j] = {{s.name}}_arr[i] 
        j += 1
        {%- endfor %}
        

    cdef double ttot = 0.0
    cdef int status
    # Allocate some temporary data
    # Now we manually evolve
    #ttot = dengo_evolve_{{solver_name}}(tf, dt, input, rtol, atol, dims, data)
    cdef double *t_now = <double *> malloc( sizeof(double) )

    
    cdef double *dt_arr = <double *> malloc(sizeof(double) * dims * niter)
    cdef double *success_arr = <double *> malloc(sizeof(double) * dims * niter)
    cdef double *ttot_arr = <double *> malloc(sizeof(double) * dims * niter)
    cdef double *temp = <double *> malloc(sizeof(double) * niter)

    cdef int niter_cvodes = niter
    
    cdef double dt  = tf / float(niter)
    field_data.dengo_data_file = "{{solver_name}}_tables.h5"

    for iter in range(niter):
        status = {{solver_name}}_solve_chemistry_dt( units, field_data, dt);
        j = 0; 

        for i in range(dims):
            {%- for s in network.required_species | sort %}
            {{s.name}}_int[i, iter] = field_data.{{s.name}}_density[i]
            j += 1
            {%- endfor %}
            temp_int[ i, iter ] = field_data.temperature[i]

        if status == 0:
            result_int[iter] = 1
            ttot += dt
        elif status == 1:
            result_int[iter] = 0

        t_int[iter] = ttot
        dt_int[iter] = dt
        

        if status == 0:
            if iter % 100 == 0:
                print("Successful iteration[% 5i]: (%0.3e) %0.3e / %0.3e" % (iter, dt, ttot, tf))

            dt = 1.1*dt

            if tf - ttot < dt:
                dt = tf - ttot
        elif status == 1:
            dt /= 2.0;
            # copy_array(prev, input, NTOT)
            # Reset the scaling array to match the new values
            # copy_array(input, scale, NTOT)
            if dt < 1e-50 * tf:
                print("dt too small (%0.3e / %0.3e) so breaking" % (dt, tf))
                break
            continue
        if ttot >= tf: break
    

    free(dt_arr)
    free(ttot_arr)
    free(success_arr)
    free(field_data)
    free(units)
    print("End in %s iterations: %0.5e / %0.5e (%0.5e)" % (iter + 1, ttot, tf, tf - ttot))

    rv, rv_t = {}, {}
    {%- for s in network.required_species | sort %}
    {{s.name}}_arr = rv["{{s.name}}"] = np.zeros(dims, "float64")
    {%- endfor %}
    if intermediate:
        {%- for s in network.required_species | sort %}
        rv_t["{{s.name}}"] = {{s.name}}_int[:niter]
        {%- endfor %}
        rv_t["successful"] = result_int.astype("bool")
        rv_t['T'] = temp_int
        rv_t['t'] = t_int
        rv_t['dt'] = dt_int

    j = 0
    for i in range(dims):
        {%- for s in network.required_species | sort %}
        {{s.name}}_arr[i] = input[j] * {{s.weight}}
        j += 1
        {%- endfor %}
    return rv, rv_t

cdef copy_array(double *input, double *output, int dims):
    cdef int i
    for i in range(dims):
        output[i] = input[i]

cdef floor_values(double *input, int dims, double floor):
    cdef int i
    for i in range(dims):
        if input[i] < floor:
            input[i] = floor
