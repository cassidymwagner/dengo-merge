cimport numpy as np

DEF NSPECIES = {{network.required_species | length}}
DEF MAX_NCELLS = 1024

cdef extern from "{{solver_name}}_solver.h":
    ctypedef struct {{solver_name}}_data:
        double dbin
        double idbin
        double bounds[2]
        int nbins

        double Ts[MAX_NCELLS]
        double Tdef[MAX_NCELLS]
        double dT[MAX_NCELLS]
        double logTs[MAX_NCELLS]
        double dTs_{{ network.energy_term.name }}[MAX_NCELLS]
        {%- for name, rate in network.reactions | dictsort %}
        double r_{{name}}[{{ network.T | length }}]
        double rs_{{name}}[MAX_NCELLS]
        double drs_{{name}}[MAX_NCELLS]
        {% endfor %}
        {%- for name, rate in network.cooling_actions | dictsort %}
        {%- for name2 in rate.tables | sort %}
        double c_{{name}}_{{name2}}[{{ network.T | length }}]
        double cs_{{name}}_{{name2}}[MAX_NCELLS]
        double dcs_{{name}}_{{name2}}[MAX_NCELLS]
        {% endfor %}
        {% endfor %}
        int bin_id[MAX_NCELLS]
        int ncells

    int {{solver_name}}_main(int argc, char **argv)
    {{solver_name}}_data *{{solver_name}}_setup_data()
    void {{ solver_name }}_read_rate_tables({{solver_name}}_data*)
    void {{ solver_name }}_read_cooling_tables({{solver_name}}_data*)
    double dengo_evolve_{{solver_name}} (double dtf, double &dt, double *input,
                double *rtol, double *atol, int dims,
                {{solver_name}}_data *data)


def main_run_{{solver_name}}():
    {{solver_name}}_main(0, NULL)

