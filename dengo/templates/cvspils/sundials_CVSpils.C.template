{% block solver_comment_header %}
/* THIS FILE HAS BEEN AUTO-GENERATED.  DO NOT EDIT. */

/* This is C++ code to read HDF5 files for
   reaction rates, cooling rates, and initial
   conditions for the chemical network defined
   by the user.  In addition, this contains
   code for calculating temperature from the
   gas energy and computing the RHS and the
   Jacobian of the system of equations which
   will be fed into the solver.
*/
{% endblock %}

#include "{{solver_name}}_solver.h"

{{solver_name}}_data *{{solver_name}}_setup_data(
    int *NumberOfFields, char ***FieldNames)
{
    int i;

    {{solver_name}}_data *data = ({{solver_name}}_data *) malloc(sizeof({{solver_name}}_data));
    
    /* allocate space for the scale related pieces */
    for (i = 0; i< {{network.required_species | length}} ; i++){
    data->scale[i] = 1.0;
    }
    
    /*initialize temperature so it wont crash*/
    data->Ts[0] = 1000.0;

    /* Temperature-related pieces */
    data->bounds[0] = {{ network.T_bounds[0] }};
    data->bounds[1] = {{ network.T_bounds[1] }};
    data->nbins = {{ network.T | length }} - 1;
    data->dbin = (log(data->bounds[1]) - log(data->bounds[0])) / data->nbins;
    data->idbin = 1.0L / data->dbin;

    /* Redshift-related pieces */
    data->z_bounds[0] = {{ network.z_bounds[0] }};
    data->z_bounds[1] = {{ network.z_bounds[1] }};
    data->n_zbins = {{ network.z | length }} - 1;
    data->d_zbin = (log(data->z_bounds[1] + 1.0) - log(data->z_bounds[0] + 1.0)) / data->n_zbins;
    data->id_zbin = 1.0L / data->d_zbin;
    
    {{ solver_name }}_read_rate_tables(data);
    fprintf(stderr, "Successfully read in rate tables.\n");

    {{ solver_name }}_read_cooling_tables(data);
    fprintf(stderr, "Successfully read in cooling rate tables.\n");

    if (FieldNames != NULL && NumberOfFields != NULL) {
        NumberOfFields[0] = {{network.required_species | length}};
        FieldNames[0] = new char*[{{ network.required_species | length }}];
        i = 0;
        {% for s in network.required_species | sort %}
        FieldNames[0][i++] = strdup("{{s.name}}");
        {% endfor %}
    }
    return data;

}

{% block entry_point %}
int {{solver_name}}_main(int argc, char** argv)
{
    {{ solver_name }}_data *data = {{solver_name}}_setup_data(NULL, NULL);

    /* Initial conditions */

    hid_t file_id = H5Fopen("{{ solver_name }}_initial_conditions.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
    if (file_id < 0) {fprintf(stderr, "Failed to open "
        "{{ solver_name }}_initial_conditions.h5 so dying.\n");
        return(1);}

    /* Allocate the correct number of cells */
    hsize_t dims; /* We have flat versus number of species */

    /* Check gas energy to get the number of cells */
    fprintf(stderr, "Getting dimensionality from {{ network.energy_term.name }}:\n");
    herr_t status = H5LTget_dataset_info(file_id, "/{{ network.energy_term.name }}", &dims, NULL, NULL);
    if(status == -1) {
        fprintf(stderr, "Error opening initial conditions file.\n");
        return 1;
    }
    fprintf(stderr, "  ncells = % 3i\n", (int) dims);
    data->ncells = dims;

    int N = {{network.required_species | length}};

    double *atol, *rtol;
    atol = (double *) alloca(N * dims * sizeof(double));
    rtol = (double *) alloca(N * dims * sizeof(double));

    double *tics = (double *) alloca(dims * sizeof(double));
    double *ics = (double *) alloca(dims * N * sizeof(double));
    double *input = (double *) alloca(dims * N * sizeof(double));
    
    unsigned int i = 0, j;
    {% for s in network.required_species | sort %}
    fprintf(stderr, "Reading I.C. for /{{ s.name }}\n");
    H5LTread_dataset_double(file_id, "/{{ s.name }}", tics);
    for (j = 0; j < dims; j++) {
        ics[j * N + i] = tics[j]; 
        atol[j * N + i] = tics[j] * 1e-09;
        rtol[j * N + i] = 1e-09;
        if(j==0) {
            fprintf(stderr, "{{s.name}}[0] = %0.3g, atol => % 0.16g\n",
                    tics[j], atol[j]);
        }
    }
    i++;
    {% endfor %}

    H5Fclose(file_id);

    double dtf = {{ network.stop_time }};
    double dt = -1.0;
    double z = -1.0;
    for (i = 0; i < dims * N; i++) input[i] = ics[i];
    double ttot;
    ttot = dengo_evolve_{{solver_name}}(dtf, dt, z, input, rtol, atol, dims, data);

    /* Write results to HDF5 file */
    file_id = H5Fcreate("{{ solver_name }}_solution.h5", H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    hsize_t dimsarr[1];
    dimsarr[0] = dims;
    i = 0;
    {% for s in network.required_species | sort %}
    double {{ s.name }}[dims];
    for (j = 0; j < dims; j++) {
        {{ s.name }}[j] = input[j * N + i]; 
    }
    fprintf(stderr, "Writing solution for /{{ s.name }}\n");
    H5LTmake_dataset_double(file_id, "/{{ s.name }}", 1, dimsarr, {{ s.name }});
    i++;
    {% endfor %}
    double temperature[dims];
    for (j = 0; j < dims; j++) {
    	temperature[j] = data->Ts[j];
    }
    H5LTmake_dataset_double(file_id, "/T", 1, dimsarr, temperature);
    double time[1];
    time[0] = ttot;
    double timestep[1];
    timestep[0] = dt;
    H5LTset_attribute_double(file_id, "/", "time", time, 1); 
    H5LTset_attribute_double(file_id, "/", "timestep", timestep, 1);
    H5Fclose(file_id);
    
    return 0;
}
{% endblock %} {# entry_point #}

{% block main_evolution %}

double dengo_evolve_{{solver_name}} (double dtf, double &dt, double z, double *input,
            double *rtol, double *atol, long long dims, {{solver_name}}_data *data) {
    int i, j;
    hid_t file_id;
    /* fprintf(stderr, "  ncells = % 3i\n", (int) dims); */

    int N = {{network.required_species | length}};

    
    {%- if not network.input_is_number %}
    for (i = 0; i<dims; i++) {
      j = i * N;
      {%- for species in network.required_species | sort %}
        {%if species.name != "ge" %}
          input[j] /= {{species.weight}} * 1.67e-24;
          atol[j] /= {{species.weight}} * 1.67e-24;
        {%endif%}
        j++;
      {%endfor%}
    }
    {%- endif %}
    ensure_electron_consistency(input, dims, N);

    rhs_f f = calculate_rhs_{{solver_name}};
    jac_f jf = calculate_JacTimesVec_{{solver_name}};
    if (dt < 0) dt = dtf / 1e5;
    data->current_z = z;
    int niter = 0;
    int siter = 0;
    double ttot = 0;
    double *scale = (double *) alloca(dims * N * sizeof(double));
    double *prev = (double *) alloca(dims * N * sizeof(double));
    for (i = 0; i < dims * N; i++) scale[i] = input[i];
    for (i = 0; i < dims * N; i++) prev[i] = input[i];
    double *u0 = (double *) alloca(N*dims*sizeof(double));
    double *s  = (double *) alloca(N*sizeof(double));
    double *gu = (double *) alloca(N*dims*sizeof(double));
    double *Ju = (double *) alloca(N*N*dims*sizeof(double));
    double floor_value = 1e-25;
    while (ttot < dtf) {
        

        /* f and jf are function for evaluating rhs and jac for the solver
        * input: {double array}
        * rtol : {double} scalar (relative tolerance)
        * atol : {double array} vector (absolue tolerance)
        * NSPECIES: {int}
        * 
        */
        int rv = 1;
        /*int rv = cvodes_main_solver( f, jf, input, rtol ,  atol, NSPECIES, (void *) data, ttot , ttot + dt);*/

        for (i = 0; i < dims * N; i++) {
            if (input[i] < 0) {
                rv = 1;
                break;
            }
        }
        if (rv == 0) {
	    if (siter == 50000) break;
	    siter++;
            if (siter % 10000 == 0) {
                fprintf(stderr, "Successful Iteration[%d]: (%0.4g) %0.16g / %0.16g\n",
                        siter, dt, ttot, dtf);
            }
            ttot += dt;
	    dt = DMIN(dt * 1.1, dtf - ttot);
	    {% if network.write_intermediate_solutions %}
	    /* Write intermediate  results to HDF5 file */
	    char imfilename[255];
	    snprintf(imfilename, 255, "{{ solver_name  }}_intermediate_%06d.h5", siter);
    	    file_id = H5Fcreate(imfilename, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    	    hsize_t dimsarr[1];
    	    dimsarr[0] = dims;
    	    i = 0;
    	    {% for s in network.required_species | sort %}
    	    double {{ s.name }}[dims];
    	    for (j = 0; j < dims; j++) {
            	{{ s.name }}[j] = prev[j * N + i];
    	    }
    	    //fprintf(stderr, "Writing solution for /{{ s.name }}\n");
    	    H5LTmake_dataset_double(file_id, "/{{ s.name }}", 1, dimsarr, {{ s.name }});
    	    i++;
    	    {% endfor %}
    	    double temperature[dims];
    	    for (j = 0; j < dims; j++) {
    	    	temperature[j] = data->Ts[j];
    	    }
    	    H5LTmake_dataset_double(file_id, "/T", 1, dimsarr, temperature);
	    double time[1];
	    time[0] = ttot;
	    double timestep[1];
	    timestep[0] = dt;
	    H5LTset_attribute_double(file_id, "/", "time", time, 1); 
	    H5LTset_attribute_double(file_id, "/", "timestep", timestep, 1);
    	    H5Fclose(file_id);
	    {% endif %}
	    for (i = 0; i < dims * N; i++) prev[i] = input[i];
            for (i = 0; i < dims * N; i++) {     
                if (input[i] < floor_value) {
                  input[i] = floor_value;
                }
            }
        } else {
            dt /= 2.0;
            for (i = 0; i < dims * N; i++) input[i] = prev[i];
            if (dt/dtf < 1e-15)  {
                fprintf(stderr, "Dying! dt/dtf = %0.5g\n", dt/dtf);
                break;
            }
        }
        niter++;
    }
    /* fprintf(stderr, "End: %0.5g / %0.5g (%0.5g)\n",
       ttot, dtf, dtf-ttot); */

    {%-  if not network.input_is_number %}
    for (i = 0; i<dims; i++) {
      j = i * N;
      {%- for species in network.required_species | sort %}
        {%if species.name != "ge" %}
          input[j] *= {{species.weight}} * 1.67e-24;
          atol[j] *= {{species.weight}} * 1.67e-24;
        {%endif%}
        j++;
      {%endfor%}
    }
    {%- endif %}
    return ttot;
}
{% endblock %} {# main_evolution #}

{% block read_tables %}
void {{ solver_name }}_read_rate_tables({{solver_name}}_data *data)
{
    hid_t file_id = H5Fopen("{{ solver_name }}_tables.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
    /* Allocate the correct number of rate tables */

    {%- for name, rate in network.reactions | dictsort %}
    H5LTread_dataset_double(file_id, "/{{ name }}", data->r_{{name}});
    {%- endfor %}

    H5Fclose(file_id);
}

void {{ solver_name }}_read_cooling_tables({{solver_name}}_data *data)
{

    hid_t file_id = H5Fopen("{{ solver_name }}_tables.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
    /* Allocate the correct number of rate tables */

    {%- for name, rate in network.cooling_actions | dictsort %}
    {%- for name2 in rate.tables | sort %}
    H5LTread_dataset_double(file_id, "/{{name}}_{{name2}}",
                            data->c_{{name}}_{{name2}});
    {%- endfor %}
    {%- endfor %}

    H5Fclose(file_id);
}

{% endblock %} {# read_tables #}

{% block calculate_temperature %}
void {{ solver_name }}_calculate_temperature({{ solver_name }}_data *data,
                        double *input, int nstrip, int nchem)
{
    int i, j;
    double density;
    double kb = 1.3806504e-16; // Boltzmann constant [erg/K]
    double mh = 1.67e-24;
    double gamma = 5.e0/3.e0;
    
    {% if 'H2_1' in network.species_list() %}
    double gammaH2 = 7.e0/5.e0; // Should be a function of temperature
    	   	     		// this is a temporary solution
    double T,x, expx, Tnew;
    {% endif %}

    


    /* Calculate total density */

    {%- for species in network.required_species | sort %}
    double {{species.name}};
    {%- endfor %}
    
    /* define scale */
    double scale;

    for (i = 0; i<nstrip; i++) {
        j = i * nchem;
    {%- for species in network.required_species | sort %}
        scale = data->scale[j];
        {{species.name}} = input[j]*scale;
        j++;
    {% endfor %}
        density = {{network.print_mass_density()}};
        
    
        {% if 'H2_1' in network.species_list() %}
        
        // Initiate the "guess" temperature
        T = data->Ts[i];
        Tnew = T + 10.0;
        double dge_dT;
        double dge;
        
        while ( abs(T - Tnew) > 0.1 ){
        // We do Newton's Iteration to calculate the temperature
        // Since gammaH2 is dependent on the temperature too!
        T = Tnew;

        // The derivatives of  sum (nkT/(gamma - 1)/mh/density) - ge
        // This is the function we want to minimize
        // which should only be dependent on the first part
        dge_dT = {{network.temperature_calculation(derivative_dge_dT=True)}};
        
        //This is the change in ge for each iteration
        dge = {{network.temperature_calculation(get_dge=True)}};

        Tnew = T - dge/dge_dT;
        //fprintf(stderr, "T: %0.5g ; Tnew: %0.5g; dT: %.5g, dge: %.5g \n", T,Tnew, dge/dge_dT, dge);
        }
        //fprintf(stderr,"---------------------\n");
        data->Ts[i] = Tnew;
        
        // Simplest Implementation: Assume a constant gammaH2
        //double gammaH2 = 7./5.;
        //data->Ts[i] = {{network.temperature_calculation()}};
        
        {#
        while ( abs(T - Tnew) > 0.01 ){
        T = data->Ts[i];
        x = 6100.0 / T;
        expx = exp(x);
        gammaH2 = 2.0 / (5.0 + 2.0 *x*x* expx/ (expx - 1.0) / (expx - 1.0) ) + 1.0;
        Tnew = {{ network.temperature_calculation() }};
        data->Ts[i] = Tnew;
        }
        #}

        {% else %}
        data->Ts[i] = {{network.temperature_calculation()}};
        {% endif %}
        
        //fprintf(stderr, "T: %0.16g \n", data->Ts[i] );

        if (data->Ts[i] < data->bounds[0]) {
            data->Ts[i] = data->bounds[0];
        } else if (data->Ts[i] > data->bounds[1]) {
            data->Ts[i] = data->bounds[1];
        }
        data->logTs[i] = log(data->Ts[i]);
        data->invTs[i] = 1.0 / data->Ts[i];
	    data->dTs_{{ network.energy_term.name }}[i] = 
        {{ network.temperature_calculation(derivative=True) }};
        /*fprintf(stderr, "T[%d] = % 0.16g, density = % 0.16g\n",
                i, data->Ts[i], density);*/
    }
         
}
{% endblock %} {# calculate_temperature #}

{% block interpolate_rates %}
/*
   This setup may be different than the user may anticipate, as a result
   of the lockstep timestep we use for a pencil beam through the grid.
   As such, it accepts the number of things to interpolate and makes
   assumptions about the sizes of the rates.
*/

/* This also requires no templating other than for the solver name...*/
void {{ solver_name }}_interpolate_rates({{ solver_name }}_data *data,
                    int nstrip)
{
    int i, bin_id, zbin_id;
    double lb, t1, t2;
    double lbz, z1, z2;
    int no_photo = 0;
    lb = log(data->bounds[0]);
    lbz = log(data->z_bounds[0] + 1.0);
    /*fprintf(stderr, "lb = % 0.16g, ub = % 0.16g\n", lb, ub);*/
    for (i = 0; i < nstrip; i++) {
        data->bin_id[i] = bin_id = (int) (data->idbin * (data->logTs[i] - lb));
        if (data->bin_id[i] <= 0) {
            data->bin_id[i] = 0;
        } else if (data->bin_id[i] >= data->nbins) {
            data->bin_id[i] = data->nbins - 1;
        }
        t1 = (lb + (bin_id    ) * data->dbin);
        t2 = (lb + (bin_id + 1) * data->dbin);
        data->Tdef[i] = (data->logTs[i] - t1)/(t2 - t1);
        data->dT[i] = (t2 - t1);
        /*fprintf(stderr, "INTERP: %d, bin_id = %d, dT = % 0.16g, T = % 0.16g, logT = % 0.16g\n",
                i, data->bin_id[i], data->dT[i], data->Ts[i],
                data->logTs[i]);*/
    }
    
    if ((data->current_z >= data->z_bounds[0]) && (data->current_z < data->z_bounds[1])) {
        zbin_id = (int) (data->id_zbin * (log(data->current_z + 1.0) - lbz));
        if (zbin_id <= 0) {
            zbin_id = 0;
        } else if (zbin_id >= data->n_zbins) {
            zbin_id = data->n_zbins - 1;
        }
        z1 = (lbz + (zbin_id    ) * data->d_zbin);
        z2 = (lbz + (zbin_id + 1) * data->d_zbin);
        data->zdef = (log(data->current_z + 1.0) - z1)/(z2 - z1);
        data->dz = (exp(z2) - exp(z1)); //note: given this, we don't have to divide rate of change by z
    } else {
        no_photo = 1;
    }
    {% for name, rate in network.reactions | dictsort %}
    {%- if 'pi' not in name %}
    for (i = 0; i < nstrip; i++) {
        bin_id = data->bin_id[i];
        data->rs_{{name}}[i] = data->r_{{name}}[bin_id] +
            data->Tdef[i] * (data->r_{{name}}[bin_id+1] - data->r_{{name}}[bin_id]);
        data->drs_{{name}}[i] = (data->r_{{name}}[bin_id+1] - data->r_{{name}}[bin_id]);
        data->drs_{{name}}[i] /= data->dT[i];
	data->drs_{{name}}[i] *= data->invTs[i];
    }
    {% else %}
    for (i = 0; i < nstrip; i++) {
        if (no_photo) {
            data->rs_{{name}}[i] = 0.0;
            data->drs_{{name}}[i] = 0.0;
        } else {
            data->rs_{{name}}[i] = data->r_{{name}}[zbin_id] +
                data->zdef * (data->r_{{name}}[zbin_id+1] - data->r_{{name}}[zbin_id]);
            data->drs_{{name}}[i] = (data->r_{{name}}[zbin_id+1] - data->r_{{name}}[zbin_id]);
            data->drs_{{name}}[i] /= data->dz;
        }
        /*fprintf(stderr, "data->rs_{{name}} = %0.3e ; data->drs_{{name}} = %0.3e\n",
                data->rs_{{name}}[i], data->drs_{{name}}[i]);*/
    }
    {% endif -%}
    {% endfor %}
    {%- for name, rate in network.cooling_actions | dictsort %}
    {%- for name2 in rate.tables | sort %}
    {%- if 'ph' not in name %}
    for (i = 0; i < nstrip; i++) {
        bin_id = data->bin_id[i];
        data->cs_{{name}}_{{name2}}[i] = data->c_{{name}}_{{name2}}[bin_id] +
            data->Tdef[i] * (data->c_{{name}}_{{name2}}[bin_id+1] - data->c_{{name}}_{{name2}}[bin_id]);
        data->dcs_{{name}}_{{name2}}[i] = (data->c_{{name}}_{{name2}}[bin_id+1] - data->c_{{name}}_{{name2}}[bin_id]);;
        data->dcs_{{name}}_{{name2}}[i] /= data->dT[i];
	data->dcs_{{name}}_{{name2}}[i] *= data->invTs[i];
    }
    {%- else %}
    for (i = 0; i < nstrip; i++) {
        if (no_photo) {
            data->cs_{{name}}_{{name2}}[i] = 0.0;
            data->dcs_{{name}}_{{name2}}[i] = 0.0;
        } else {
            data->cs_{{name}}_{{name2}}[i] = data->c_{{name}}_{{name2}}[zbin_id] +
                data->zdef * (data->c_{{name}}_{{name2}}[zbin_id+1] - data->c_{{name}}_{{name2}}[zbin_id]);
            data->dcs_{{name}}_{{name2}}[i] = (data->c_{{name}}_{{name2}}[zbin_id+1] - data->c_{{name}}_{{name2}}[zbin_id]);;
            data->dcs_{{name}}_{{name2}}[i] /= data->dz;
        }
    }
    {%- endif -%}          
    {% endfor %}
    {% endfor %}

}
{% endblock %} {# interpolate_rates #}


{% block ensure_electron_consistency %}

void ensure_electron_consistency(double *input, int nstrip, int nchem)
{
    int i, j;

    /* Now we set up some temporaries */
    {%- for species in network.required_species | sort %}
    double {{species.name}};
    {%- endfor %}
    double total_e = 0.0;
    int e_indx;
    
    double scale;

    for (i = 0; i<nstrip; i++) {
        j = i * nchem;
    {%- for species in network.required_species | sort %}
        {{species.name}} = input[j];
        {%if species.name != "ge" and species.name != "de" 
             and species.name != "us_e_0" %}
        total_e += {{species.name}} * {{species.free_electrons}};
        {%-endif%}
        {%if species.name == "de" or species.name == "us_e_0" -%}
        e_indx = j;
        {%endif%}
        j++;
    {% endfor %}
        input[e_indx] = total_e;
    }  
}

{% endblock %}

{% block temperature_from_mass_density %}
void temperature_from_mass_density(double *input, int nstrip,
                                   int nchem, double *strip_temperature)
{
    int i, j;
    double density;
    double kb = 1.3806504e-16; // Boltzmann constant [erg/K]
    double mh = 1.67e-24;
    double gamma = 5.e0/3.e0;
    {% if 'H2_1' in network.species_list() %}
    double gammaH2 = 7.e0/5.e0; // Should be a function of temperature
    	   	     		// this is a temporary solution
    
    double T =  1000.0; // THIS IS TEMPORARY!!! DELTETE!!

    {% endif %}
    {%- for species in network.required_species | sort %}
    double {{species.name}};
    {%- endfor %}
    
    double scale;

    for (i = 0; i<nstrip; i++) {
        j = i * nchem;
    {%- for species in network.required_species | sort %}
        {{species.name}} = input[j];
        {%if species.name != "ge" %}
        {{species.name}} /= {{species.weight}} * mh;
        {%endif%}
        /*fprintf(stderr, "{{species.name}}[%d] = % 0.16g\n",
                i, {{species.name}});*/
        j++;
    {% endfor %}
        density = {{network.print_mass_density()}};
        strip_temperature[i] = {{ network.temperature_calculation() }};
        if (strip_temperature[i] < 1.0)
            strip_temperature[i] = 1.0;
    }
         
}
{% endblock %} {# temperature_from_mass_density #}

{% block calculate_JacTimesVec_sundials %}
int calculate_JacTimesVec_{{solver_name}}
            (N_Vector v, N_Vector Jv, realtype t,
             N_Vector y, N_Vector fy,
             void *user_data, N_Vector tmp)
{
    /* We iterate over all of the rates */
    /* Calcuate temperature first */ 
    int nstrip = 1;
    int nchem = {{network.required_species | length }};
    {{solver_name}}_data *data = ({{solver_name}}_data*)user_data; 
    

    int i, j;
    j = 0;
    /* change N_Vector back to an array */
    double y_arr[ {{network.required_species | length }} ];
    {%- for species in network.required_species | sort %}
    y_arr[{{loop.index - 1}}] = Ith(y , {{loop.index }});
    {%- endfor %}
    // Abundances are scaled in the calculate temperature module
    {{solver_name}}_calculate_temperature(data, y_arr, nstrip, nchem);
    {{solver_name}}_interpolate_rates(data, nstrip);
    

    /* Now We set up some temporaries */
    double *T{{ network.energy_term.name }} = data->dTs_{{network.energy_term.name }};
    
    /* Define the reaction rates */
    {%- for name, rate in network.reactions | dictsort %}
    double *{{name}} = data->rs_{{name}};
    double *r{{name}} = data->drs_{{name}};
    {%- endfor %}

    {%- for name, rate in network.cooling_actions | dictsort %}
    {%- for name2 in rate.tables | sort %}
    double *{{name}}_{{name2}} = data->cs_{{name}}_{{name2}};
    double *r{{name}}_{{name2}} = data->dcs_{{name}}_{{name2}};
    {%- endfor %}
    {%- endfor %}
    

    double scale;
    /* Define the species */
    {%- for species in network.required_species | sort %}
    double {{species.name}}, v{{loop.index-1}};
    {%- endfor %}
    
    {%- for v in network.required_species | sort %}
    scale = data->scale[{{loop.index - 1}}];
    v{{loop.index-1}} = Ith( v, {{loop.index}} );
    v{{loop.index-1}} *= scale;
    {%- endfor %}

    double z;
    double T;

    double mh = 1.67e-24;
    double mdensity;
    
    int jj;
    jj = 0;

    for (i = 0; i<nstrip; i++) {
        j = i*nchem;
        mdensity = 0.0;
        z = data->current_z;
        {%- for species in network.required_species | sort %}
        // Rescale the Species abundances
        scale = data->scale[j];
        {{species.name}} = Ith( y, {{loop.index }}  )*scale;
        {%if species.name != "ge" and species.name != "de" and species.name != "us_e_0" %}
        mdensity += {{species.name}};
        {% endif %}
        j++;
        {% endfor %}

        {%- if "H2_1" in network.species_list() %}
        double nH; 
        nH = H_1 + H_2 + 2.0*H2_1 + 2.0*H2_2;
        {% endif %}

        mdensity *= mh;
        
        j = 0;
        {%- for s1 in network.required_species | sort %}
        //
        // Species: {{s1.name}}
        //
        {{ network.print_JacTimesVec_component(s1, assign_to="Ith(Jv, {0} )".format(loop.index) ) }}

        scale = data->scale[{{loop.index - 1}}];
        Ith(Jv, {{loop.index}}) /= scale;

        {% if s1.name == "ge" %}
        Ith(Jv, {{loop.index}}) /= mdensity;
        {% endif %}
        {%- endfor %}
    }
    return 0;
}


{% endblock %}


{% block calcuate_rhs_sundials%}
int calculate_rhs_{{solver_name}}(realtype t, N_Vector y, N_Vector ydot, void *user_data)
{
    {{solver_name}}_data *data = ({{solver_name}}_data* ) user_data;
    int i, j;

    int nchem = {{network.required_species | length }};
    int nstrip = 1;
    
    /* change N_Vector back to an array */
    double y_arr[ {{network.required_species | length }} ];
    {%- for species in network.required_species | sort %}
    /* the variable is ALREADY scaled in "calculate temperature" */
    y_arr[{{loop.index - 1}}] = Ith(y , {{loop.index }});
    {%- endfor %}

    {{solver_name}}_calculate_temperature(data, y_arr , nstrip, nchem );
    {{solver_name}}_interpolate_rates(data, nstrip);


    /* Now we set up some temporaries */

    {%- for name, rate in network.reactions | dictsort %}
    double *{{name}} = data->rs_{{name}};
    {%- endfor %}

    {%- for name, rate in network.cooling_actions | dictsort %}
    {%- for name2 in rate.tables | sort %}
    double *{{name}}_{{name2}} = data->cs_{{name}}_{{name2}};
    {%- endfor %}
    {%- endfor %}

    {%- for species in network.required_species | sort %}
    double {{species.name}};
    {%- endfor %}

    double z;
    double T;

    double mh = 1.67e-24;
    double mdensity;

    T = data->Ts[i];
    z = data->current_z;
    
    double scale;
    int jj =0;
    {%- for species in network.required_species | sort %}
    scale = data->scale[jj];
    {{species.name}} = Ith( y,{{loop.index }} )*scale;
    jj++;
    {% if species.name != "ge" and species.name != "de" and species.name != "us_e_0" %}
    mdensity += {{species.name}};
    {% endif %}


    {% endfor %}
    
    {%- if "H2_1" in network.species_list() %}
    double nH; 
    nH = H_1 + H_2 + 2.0*H2_1 + 2.0*H2_2;
    {% endif %}
    
    mdensity *= mh;

    {%- for species in network.required_species | sort %}
    //
    // Species: {{species.name}}
    //
    {{network.print_ccode(species, assign_to="Ith(ydot, {})".format(loop.index) ) }}
    
    scale = data->scale[{{loop.index}} - 1];
    Ith(ydot, {{loop.index}}) /= scale;

    {% if species.name == "ge" %}
    Ith(ydot, {{loop.index}}) /= mdensity;
    {% endif %}
    {% endfor %}
    
    return 0;
}
{% endblock %}
